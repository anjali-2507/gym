[{"D:\\Gym-Dashboard-main\\app\\(dashboard)\\dashboard\\ClientData\\page.tsx":"1","D:\\Gym-Dashboard-main\\app\\(dashboard)\\dashboard\\layout.tsx":"2","D:\\Gym-Dashboard-main\\app\\(dashboard)\\dashboard\\page.tsx":"3","D:\\Gym-Dashboard-main\\app\\(dashboard)\\dashboard\\user\\page.tsx":"4","D:\\Gym-Dashboard-main\\app\\(dashboard)\\dashboard\\user\\[userId]\\page.tsx":"5","D:\\Gym-Dashboard-main\\app\\api\\addclient\\route.ts":"6","D:\\Gym-Dashboard-main\\app\\api\\auth\\[...nextauth]\\route.ts":"7","D:\\Gym-Dashboard-main\\app\\api\\carbot\\route.ts":"8","D:\\Gym-Dashboard-main\\app\\api\\clientdata\\route.ts":"9","D:\\Gym-Dashboard-main\\app\\api\\delete\\route.ts":"10","D:\\Gym-Dashboard-main\\app\\api\\Gym_Management\\route.ts":"11","D:\\Gym-Dashboard-main\\app\\api\\momDatas\\route.ts":"12","D:\\Gym-Dashboard-main\\app\\api\\uploadthing\\core.ts":"13","D:\\Gym-Dashboard-main\\app\\api\\uploadthing\\route.ts":"14","D:\\Gym-Dashboard-main\\app\\layout.tsx":"15","D:\\Gym-Dashboard-main\\app\\not-found.tsx":"16","D:\\Gym-Dashboard-main\\app\\page.tsx":"17","D:\\Gym-Dashboard-main\\components\\breadcrumb.tsx":"18","D:\\Gym-Dashboard-main\\components\\dashboard-nav.tsx":"19","D:\\Gym-Dashboard-main\\components\\date-range-picker.tsx":"20","D:\\Gym-Dashboard-main\\components\\file-upload.tsx":"21","D:\\Gym-Dashboard-main\\components\\github-auth-button.tsx":"22","D:\\Gym-Dashboard-main\\components\\icons.tsx":"23","D:\\Gym-Dashboard-main\\components\\layout\\header.tsx":"24","D:\\Gym-Dashboard-main\\components\\layout\\mobile-sidebar.tsx":"25","D:\\Gym-Dashboard-main\\components\\layout\\providers.tsx":"26","D:\\Gym-Dashboard-main\\components\\layout\\sidebar-old.tsx":"27","D:\\Gym-Dashboard-main\\components\\layout\\sidebar.tsx":"28","D:\\Gym-Dashboard-main\\components\\layout\\ThemeToggle\\theme-provider.tsx":"29","D:\\Gym-Dashboard-main\\components\\layout\\ThemeToggle\\theme-toggle.tsx":"30","D:\\Gym-Dashboard-main\\components\\layout\\user-nav.tsx":"31","D:\\Gym-Dashboard-main\\components\\overview.tsx":"32","D:\\Gym-Dashboard-main\\components\\recent-audits.tsx":"33","D:\\Gym-Dashboard-main\\components\\tables\\audit-table\\cell-actions.tsx":"34","D:\\Gym-Dashboard-main\\components\\tables\\audit-table\\columns.tsx":"35","D:\\Gym-Dashboard-main\\components\\tables\\audit-table\\components\\last-audit-marks-chart.tsx":"36","D:\\Gym-Dashboard-main\\components\\tables\\audit-table\\components\\last-audit-marks-improvement.tsx":"37","D:\\Gym-Dashboard-main\\components\\tables\\audit-table\\components\\last-audit-marks-inline.tsx":"38","D:\\Gym-Dashboard-main\\components\\tables\\audit-table\\table.tsx":"39","D:\\Gym-Dashboard-main\\components\\tables\\employee-tables\\cell-action.tsx":"40","D:\\Gym-Dashboard-main\\components\\tables\\employee-tables\\columns.tsx":"41","D:\\Gym-Dashboard-main\\components\\tables\\employee-tables\\employee-table.tsx":"42","D:\\Gym-Dashboard-main\\components\\tables\\hocs-table\\cell-action.tsx":"43","D:\\Gym-Dashboard-main\\components\\tables\\hocs-table\\columns.tsx":"44","D:\\Gym-Dashboard-main\\components\\tables\\hocs-table\\table.tsx":"45","D:\\Gym-Dashboard-main\\components\\tables\\hosos-table\\cell-actions.tsx":"46","D:\\Gym-Dashboard-main\\components\\tables\\hosos-table\\columns.tsx":"47","D:\\Gym-Dashboard-main\\components\\tables\\hosos-table\\table.tsx":"48","D:\\Gym-Dashboard-main\\components\\tables\\kocs-table\\cell-actions.tsx":"49","D:\\Gym-Dashboard-main\\components\\tables\\kocs-table\\columns.tsx":"50","D:\\Gym-Dashboard-main\\components\\tables\\kocs-table\\table.tsx":"51","D:\\Gym-Dashboard-main\\components\\tables\\mvrs-table\\cell-action.tsx":"52","D:\\Gym-Dashboard-main\\components\\tables\\mvrs-table\\columns.tsx":"53","D:\\Gym-Dashboard-main\\components\\tables\\mvrs-table\\mvrs-table.tsx":"54","D:\\Gym-Dashboard-main\\components\\tables\\user-tables\\cell-action.tsx":"55","D:\\Gym-Dashboard-main\\components\\tables\\user-tables\\client.tsx":"56","D:\\Gym-Dashboard-main\\components\\tables\\user-tables\\columns.tsx":"57","D:\\Gym-Dashboard-main\\components\\ui\\accordion.tsx":"58","D:\\Gym-Dashboard-main\\components\\ui\\alert-dialog.tsx":"59","D:\\Gym-Dashboard-main\\components\\ui\\alert.tsx":"60","D:\\Gym-Dashboard-main\\components\\ui\\avatar.tsx":"61","D:\\Gym-Dashboard-main\\components\\ui\\badge.tsx":"62","D:\\Gym-Dashboard-main\\components\\ui\\button.tsx":"63","D:\\Gym-Dashboard-main\\components\\ui\\calendar.tsx":"64","D:\\Gym-Dashboard-main\\components\\ui\\card.tsx":"65","D:\\Gym-Dashboard-main\\components\\ui\\checkbox.tsx":"66","D:\\Gym-Dashboard-main\\components\\ui\\collapsible.tsx":"67","D:\\Gym-Dashboard-main\\components\\ui\\data-table.tsx":"68","D:\\Gym-Dashboard-main\\components\\ui\\dialog.tsx":"69","D:\\Gym-Dashboard-main\\components\\ui\\dropdown-menu.tsx":"70","D:\\Gym-Dashboard-main\\components\\ui\\form.tsx":"71","D:\\Gym-Dashboard-main\\components\\ui\\heading.tsx":"72","D:\\Gym-Dashboard-main\\components\\ui\\input.tsx":"73","D:\\Gym-Dashboard-main\\components\\ui\\label.tsx":"74","D:\\Gym-Dashboard-main\\components\\ui\\modal.tsx":"75","D:\\Gym-Dashboard-main\\components\\ui\\popover.tsx":"76","D:\\Gym-Dashboard-main\\components\\ui\\scroll-area.tsx":"77","D:\\Gym-Dashboard-main\\components\\ui\\select.tsx":"78","D:\\Gym-Dashboard-main\\components\\ui\\separator.tsx":"79","D:\\Gym-Dashboard-main\\components\\ui\\sheet.tsx":"80","D:\\Gym-Dashboard-main\\components\\ui\\skeleton.tsx":"81","D:\\Gym-Dashboard-main\\components\\ui\\slider.tsx":"82","D:\\Gym-Dashboard-main\\components\\ui\\switch.tsx":"83","D:\\Gym-Dashboard-main\\components\\ui\\table.tsx":"84","D:\\Gym-Dashboard-main\\components\\ui\\tabs.tsx":"85","D:\\Gym-Dashboard-main\\components\\ui\\textarea.tsx":"86","D:\\Gym-Dashboard-main\\components\\ui\\toast.tsx":"87","D:\\Gym-Dashboard-main\\components\\ui\\toaster.tsx":"88","D:\\Gym-Dashboard-main\\components\\ui\\tooltip.tsx":"89","D:\\Gym-Dashboard-main\\components\\ui\\use-toast.ts":"90","D:\\Gym-Dashboard-main\\components\\ViewMeetingData.tsx":"91","D:\\Gym-Dashboard-main\\lib\\form-schema.ts":"92","D:\\Gym-Dashboard-main\\lib\\utils.ts":"93"},{"size":8058,"mtime":1732875208980,"results":"94","hashOfConfig":"95"},{"size":543,"mtime":1732806672429,"results":"96","hashOfConfig":"95"},{"size":13623,"mtime":1732874473486,"results":"97","hashOfConfig":"95"},{"size":452,"mtime":1732806672561,"results":"98","hashOfConfig":"95"},{"size":483,"mtime":1733133435261,"results":"99","hashOfConfig":"95"},{"size":1675,"mtime":1732806672638,"results":"100","hashOfConfig":"95"},{"size":74,"mtime":1732806672672,"results":"101","hashOfConfig":"95"},{"size":1526,"mtime":1732806672704,"results":"102","hashOfConfig":"95"},{"size":1773,"mtime":1732806672733,"results":"103","hashOfConfig":"95"},{"size":2156,"mtime":1732806672768,"results":"104","hashOfConfig":"95"},{"size":2881,"mtime":1732806672798,"results":"105","hashOfConfig":"95"},{"size":1535,"mtime":1732806672829,"results":"106","hashOfConfig":"95"},{"size":981,"mtime":1732806672862,"results":"107","hashOfConfig":"95"},{"size":220,"mtime":1732806672890,"results":"108","hashOfConfig":"95"},{"size":976,"mtime":1732806672317,"results":"109","hashOfConfig":"95"},{"size":1066,"mtime":1732806672353,"results":"110","hashOfConfig":"95"},{"size":480,"mtime":1732806672389,"results":"111","hashOfConfig":"95"},{"size":1102,"mtime":1732806672930,"results":"112","hashOfConfig":"95"},{"size":2374,"mtime":1732806672973,"results":"113","hashOfConfig":"95"},{"size":1795,"mtime":1732806673023,"results":"114","hashOfConfig":"95"},{"size":1780,"mtime":1733133551619,"results":"115","hashOfConfig":"95"},{"size":619,"mtime":1732806673112,"results":"116","hashOfConfig":"95"},{"size":2926,"mtime":1732806673150,"results":"117","hashOfConfig":"95"},{"size":1377,"mtime":1732806673688,"results":"118","hashOfConfig":"95"},{"size":1238,"mtime":1732806673725,"results":"119","hashOfConfig":"95"},{"size":516,"mtime":1732806673756,"results":"120","hashOfConfig":"95"},{"size":618,"mtime":1732806673822,"results":"121","hashOfConfig":"95"},{"size":1307,"mtime":1732806673792,"results":"122","hashOfConfig":"95"},{"size":312,"mtime":1732806673903,"results":"123","hashOfConfig":"95"},{"size":1402,"mtime":1732806673940,"results":"124","hashOfConfig":"95"},{"size":2442,"mtime":1732806673863,"results":"125","hashOfConfig":"95"},{"size":1613,"mtime":1732806673189,"results":"126","hashOfConfig":"95"},{"size":2899,"mtime":1733133631372,"results":"127","hashOfConfig":"95"},{"size":0,"mtime":1732806674234,"results":"128","hashOfConfig":"95"},{"size":1669,"mtime":1732806674271,"results":"129","hashOfConfig":"95"},{"size":1062,"mtime":1732806674351,"results":"130","hashOfConfig":"95"},{"size":736,"mtime":1732806674385,"results":"131","hashOfConfig":"95"},{"size":768,"mtime":1732806674423,"results":"132","hashOfConfig":"95"},{"size":9676,"mtime":1732806674309,"results":"133","hashOfConfig":"95"},{"size":1500,"mtime":1733133708263,"results":"134","hashOfConfig":"95"},{"size":1120,"mtime":1732806674502,"results":"135","hashOfConfig":"95"},{"size":10158,"mtime":1732806674542,"results":"136","hashOfConfig":"95"},{"size":0,"mtime":1732806674571,"results":"137","hashOfConfig":"95"},{"size":1771,"mtime":1733133817910,"results":"138","hashOfConfig":"95"},{"size":9346,"mtime":1732806674645,"results":"139","hashOfConfig":"95"},{"size":0,"mtime":1732806674673,"results":"140","hashOfConfig":"95"},{"size":2020,"mtime":1733133906724,"results":"141","hashOfConfig":"95"},{"size":9828,"mtime":1732806674746,"results":"142","hashOfConfig":"95"},{"size":0,"mtime":1732806674772,"results":"143","hashOfConfig":"95"},{"size":2001,"mtime":1733133978158,"results":"144","hashOfConfig":"95"},{"size":9427,"mtime":1732806674847,"results":"145","hashOfConfig":"95"},{"size":1853,"mtime":1733134047259,"results":"146","hashOfConfig":"95"},{"size":1278,"mtime":1733134108226,"results":"147","hashOfConfig":"95"},{"size":9902,"mtime":1732806674971,"results":"148","hashOfConfig":"95"},{"size":289,"mtime":1733133506786,"results":"149","hashOfConfig":"95"},{"size":1075,"mtime":1732806675053,"results":"150","hashOfConfig":"95"},{"size":919,"mtime":1733133479223,"results":"151","hashOfConfig":"95"},{"size":2035,"mtime":1732806675128,"results":"152","hashOfConfig":"95"},{"size":4614,"mtime":1732806675204,"results":"153","hashOfConfig":"95"},{"size":1605,"mtime":1732806675164,"results":"154","hashOfConfig":"95"},{"size":1430,"mtime":1732806675239,"results":"155","hashOfConfig":"95"},{"size":1142,"mtime":1732806675276,"results":"156","hashOfConfig":"95"},{"size":1825,"mtime":1732806675312,"results":"157","hashOfConfig":"95"},{"size":2684,"mtime":1732806675350,"results":"158","hashOfConfig":"95"},{"size":1874,"mtime":1732806675387,"results":"159","hashOfConfig":"95"},{"size":1051,"mtime":1732806675421,"results":"160","hashOfConfig":"95"},{"size":335,"mtime":1732806675457,"results":"161","hashOfConfig":"95"},{"size":3754,"mtime":1732806675494,"results":"162","hashOfConfig":"95"},{"size":3928,"mtime":1732806675531,"results":"163","hashOfConfig":"95"},{"size":7398,"mtime":1732806675566,"results":"164","hashOfConfig":"95"},{"size":4187,"mtime":1732806675603,"results":"165","hashOfConfig":"95"},{"size":323,"mtime":1732806675634,"results":"166","hashOfConfig":"95"},{"size":807,"mtime":1732806675672,"results":"167","hashOfConfig":"95"},{"size":733,"mtime":1732806675706,"results":"168","hashOfConfig":"95"},{"size":783,"mtime":1732806675742,"results":"169","hashOfConfig":"95"},{"size":1253,"mtime":1732806675779,"results":"170","hashOfConfig":"95"},{"size":1649,"mtime":1732806675815,"results":"171","hashOfConfig":"95"},{"size":4393,"mtime":1732806675850,"results":"172","hashOfConfig":"95"},{"size":777,"mtime":1732806675885,"results":"173","hashOfConfig":"95"},{"size":4347,"mtime":1732806675922,"results":"174","hashOfConfig":"95"},{"size":269,"mtime":1732806675956,"results":"175","hashOfConfig":"95"},{"size":1058,"mtime":1732806675991,"results":"176","hashOfConfig":"95"},{"size":1169,"mtime":1732806676025,"results":"177","hashOfConfig":"95"},{"size":2841,"mtime":1732806676063,"results":"178","hashOfConfig":"95"},{"size":1903,"mtime":1732806676098,"results":"179","hashOfConfig":"95"},{"size":738,"mtime":1732806676132,"results":"180","hashOfConfig":"95"},{"size":4863,"mtime":1732806676168,"results":"181","hashOfConfig":"95"},{"size":799,"mtime":1732806676203,"results":"182","hashOfConfig":"95"},{"size":1152,"mtime":1732806676237,"results":"183","hashOfConfig":"95"},{"size":3970,"mtime":1732806676263,"results":"184","hashOfConfig":"95"},{"size":4041,"mtime":1732806673271,"results":"185","hashOfConfig":"95"},{"size":1398,"mtime":1732806676395,"results":"186","hashOfConfig":"95"},{"size":510,"mtime":1733134181069,"results":"187","hashOfConfig":"95"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191"},"k8v57c",{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219"},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227"},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247"},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","suppressedMessages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254"},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261"},{"filePath":"262","messages":"263","suppressedMessages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268"},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272"},{"filePath":"273","messages":"274","suppressedMessages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","suppressedMessages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","suppressedMessages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","suppressedMessages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","suppressedMessages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","suppressedMessages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","suppressedMessages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294"},{"filePath":"295","messages":"296","suppressedMessages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","suppressedMessages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301"},{"filePath":"302","messages":"303","suppressedMessages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","suppressedMessages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","suppressedMessages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","suppressedMessages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","suppressedMessages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","suppressedMessages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320"},{"filePath":"321","messages":"322","suppressedMessages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324"},{"filePath":"325","messages":"326","suppressedMessages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"328","messages":"329","suppressedMessages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","suppressedMessages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"334","messages":"335","suppressedMessages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","suppressedMessages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340"},{"filePath":"341","messages":"342","suppressedMessages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"344","messages":"345","suppressedMessages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"347","messages":"348","suppressedMessages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350"},{"filePath":"351","messages":"352","suppressedMessages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","suppressedMessages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","suppressedMessages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360"},{"filePath":"361","messages":"362","suppressedMessages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364"},{"filePath":"365","messages":"366","suppressedMessages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368"},{"filePath":"369","messages":"370","suppressedMessages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372"},{"filePath":"373","messages":"374","suppressedMessages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376"},{"filePath":"377","messages":"378","suppressedMessages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"380","messages":"381","suppressedMessages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"383","messages":"384","suppressedMessages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"386","messages":"387","suppressedMessages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"389","messages":"390","suppressedMessages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"392","messages":"393","suppressedMessages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"395","messages":"396","suppressedMessages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","suppressedMessages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"401","messages":"402","suppressedMessages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"404","messages":"405","suppressedMessages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"407","messages":"408","suppressedMessages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"410","messages":"411","suppressedMessages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"413","messages":"414","suppressedMessages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"416","messages":"417","suppressedMessages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"419","messages":"420","suppressedMessages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","suppressedMessages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"425","messages":"426","suppressedMessages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"428","messages":"429","suppressedMessages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"431","messages":"432","suppressedMessages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"434","messages":"435","suppressedMessages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"437","messages":"438","suppressedMessages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"440","messages":"441","suppressedMessages":"442","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"443","messages":"444","suppressedMessages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"446","messages":"447","suppressedMessages":"448","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"449","messages":"450","suppressedMessages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"452","messages":"453","suppressedMessages":"454","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"455","messages":"456","suppressedMessages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"458","messages":"459","suppressedMessages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"461","messages":"462","suppressedMessages":"463","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"464","messages":"465","suppressedMessages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"467","messages":"468","suppressedMessages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"470","messages":"471","suppressedMessages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"473","messages":"474","suppressedMessages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"476","messages":"477","suppressedMessages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"479","messages":"480","suppressedMessages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"482","messages":"483","suppressedMessages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"485","messages":"486","suppressedMessages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"488","messages":"489","suppressedMessages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Gym-Dashboard-main\\app\\(dashboard)\\dashboard\\ClientData\\page.tsx",["491"],[],"'use client';\nimport React, { useEffect, useState } from 'react';\nimport { Card, CardHeader, CardContent } from '@/components/ui/card';\nimport { Loader2 } from 'lucide-react';\n\ninterface User {\n  _id: string;\n  clientName: string;\n  clientNumber: number;\n  role: string;\n}\n\nexport default function VehicleCarBotDashboard() {\n  const [users, setUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string>('');\n  const [showForm, setShowForm] = useState(false);\n  const [clientName, setClientName] = useState('');\n  const [clientNumber, setClientNumber] = useState('');\n  const [role, setRole] = useState('user');\n  const [message, setMessage] = useState('');\n\n  const fetchUsers = async () => {\n    try {\n      const response = await fetch('/api/clientdata');\n      const data = await response.json();\n      if (data.success && data.data) {\n        setUsers(data.data);\n      } else {\n        throw new Error(data.message || 'Failed to fetch users');\n      }\n    } catch (err) {\n      setError(\n        'Error fetching users: ' +\n          (err instanceof Error ? err.message : String(err))\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddClientClick = () => {\n    setShowForm(true);\n  };\n\n  const handleFormSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n  \n    const payload = { clientName, clientNumber, role };\n  \n    try {\n      const response = await fetch('/api/addclient', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n  \n      const data = await response.json();\n  \n      if (data.success) {\n        setMessage('Client added successfully!');\n        setClientName('');\n        setClientNumber('');\n        setRole('user');\n        fetchUsers(); // Refresh the list of users\n        setShowForm(false); // Close the form after successful submission\n      } else {\n        setMessage(`Failed to add client: ${data.message}`);\n      }\n    } catch (error) {\n      setMessage('An error occurred while adding the client');\n      console.error('Error:', error);\n    }\n  };\n  \n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    if (name === 'clientName') setClientName(value);\n    if (name === 'clientNumber') {\n      // Ensure the client number starts with 91 and is followed by 10 digits\n      const formattedNumber = value.replace(/^(\\d{0,2})?(\\d{0,10})/, '91$2');\n      setClientNumber(formattedNumber);\n    }\n    if (name === 'role') setRole(value);\n  };\n  \n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-gray-500\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-900\">\n      <div className=\"p-4 md:p-6\">\n        {error && (\n          <div className=\"mb-4 rounded-lg bg-red-100 p-4 text-red-700\">\n            {error}\n          </div>\n        )}\n        <Card>\n          <CardHeader className=\"px-6 py-4\">\n            <h2 className=\"text-2xl font-bold tracking-tight text-gray-900 dark:text-white\">\n              Client Data\n            </h2>\n            <div className=\"flex justify-end\">\n              <button\n                onClick={handleAddClientClick}\n                className=\"rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600\"\n              >\n                Add Client\n              </button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0\" >\n            <div className=\"relative\">\n              <div className=\"max-h-[calc(100vh-12rem)] overflow-auto\">\n                <div className=\"min-w-full\">\n                  <div className=\"sticky top-0 bg-gray-100 shadow-sm hover: dark:bg-gray-900 \">\n                    <div className=\"grid grid-cols-3 gap-4 text-gray-700 dark:text-white \">\n                      <div className=\"p-4 text-center font-semibold\">\n                        Client Name\n                      </div>\n                      <div className=\"p-4 text-center font-semibold\">\n                        Client Number\n                      </div>\n                      <div className=\"p-4 text-center font-semibold\">Role</div>\n                    </div>\n                  </div>\n                  <div>\n                    {users.length === 0 ? (\n                      <div className=\"flex h-32 items-center justify-center text-gray-500\">\n                        No users found\n                      </div>\n                    ) : (\n                      users.map((user) => (\n                        <div\n                          key={user._id }\n                          className=\"grid grid-cols-3 gap-4 border-b border-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 light \"\n                        >\n                          <div className=\"p-4 text-center text-gray-800 dark:text-white\">\n                            {user.clientName || 'N/A'}\n                          </div>\n                          <div className=\"p-4 text-center text-gray-800 dark:text-white\">\n                            {user.clientNumber || 'N/A'}\n                          </div>\n                          <div className=\"p-4 text-center text-gray-800 dark:text-white\">\n                            {user.role || 'N/A'}\n                          </div>\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {showForm && (\n          <div className=\"bg-grey fixed inset-0 flex items-center justify-center bg-opacity-50\">\n            <div className=\"w-96 rounded-lg bg-white p-6 shadow-lg dark:bg-gray-900\">\n              <h3 className=\"mb-4 text-lg font-bold text-gray-900 dark:text-white\">\n                Add New Client\n              </h3>\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  type=\"text\"\n                  name=\"clientName\"\n                  placeholder=\"Client Name\"\n                  value={clientName}\n                  onChange={handleInputChange}\n                  className=\"mb-4 w-full rounded border px-3 py-2\"\n                  required\n                />\n                <input\n                  type=\"text\"\n                  name=\"clientNumber\"\n                  placeholder=\"Client Number\"\n                  value={clientNumber}\n                  onChange={handleInputChange}\n                  className=\"mb-4 w-full rounded border px-3 py-2\"\n                  required\n                />\n                <select\n                  id=\"role\"\n                  name=\"role\"\n                  value={role}\n                  onChange={(e) => setRole(e.target.value)}\n                  className=\"mb-4 w-full rounded border px-3 py-2\"\n                >\n                  <option value=\"Role\" disabled>\n                    Role\n                  </option>\n                  <option value=\"user\">User</option>\n                  <option value=\"owner\">Owner</option>\n                  <option value=\"trainer\">Trainer</option>\n                </select>\n\n                <div className=\"flex justify-end\">\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowForm(false)}\n                    className=\"mr-2 px-4 py-2 text-gray-500 hover:text-gray-700\"\n                  >\n                    Cancel\n                  </button>\n                  <button\n                    type=\"submit\"\n                    className=\"rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600\"\n                  >\n                    Submit\n                  </button>\n                </div>\n                {message && <p className=\"mt-4 text-center\">{message}</p>}\n              </form>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","D:\\Gym-Dashboard-main\\app\\(dashboard)\\dashboard\\layout.tsx",[],[],"D:\\Gym-Dashboard-main\\app\\(dashboard)\\dashboard\\page.tsx",["492","493","494"],[],"'use client';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { FaSearch, FaCalendarAlt } from 'react-icons/fa'; \nimport { Input } from '@/components/ui/input';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport DatePicker from 'react-datepicker'; \nimport 'react-datepicker/dist/react-datepicker.css'; \nimport { saveAs } from 'file-saver'; // For downloading files\nimport jsPDF from 'jspdf'; // For generating PDFs\nimport 'jspdf-autotable'; // For table support in PDF\nimport * as XLSX from 'xlsx'; // For generating Excel files\n\ninterface Meeting {\n  _id: string;\n  clientName: string;\n  clientNumber: string;\n  date: string;\n  time: string;\n  status: string;\n  markDate: string;\n  statusTime: string;\n  TotalTime: string;\n  studentResponseTime?: string; // The time when the student clicked Yes/No\n\n}\n\nconst GymDashboard = () => {\n  const [meetings, setMeetings] = useState<Meeting[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [dateRange, setDateRange] = useState<[Date | null, Date | null]>([null, null]);\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false); // State for controlling the dropdown visibility\n  const dropdownRef = useRef<HTMLDivElement>(null); // Reference for dropdown\n\n  useEffect(() => {\n    const fetchMeetings = async () => {\n      try {\n        const response = await fetch('/api/Gym_Management');\n        const data = await response.json();\n        if (data.success && data.data) {\n          setMeetings(data.data);\n        }\n      } catch (err) {\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMeetings();\n  }, []);\n\n  // Close dropdown when clicking outside of it\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsDropdownOpen(false);\n      }\n    };\n\n    // Add event listener\n    document.addEventListener('mousedown', handleClickOutside);\n\n    // Cleanup event listener on component unmount\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-GB', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n    });\n  };\n\n  const timeToDate = (time: string) => {\n    const today = new Date();\n    const [hours, minutesWithPeriod] = time.split(':');\n    const [minutes, period] = minutesWithPeriod.split(' ');\n    let hour = parseInt(hours, 10);\n    if (period === 'pm' && hour < 12) hour += 12;\n    if (period === 'am' && hour === 12) hour = 0;\n    const formattedTime = `${today.toLocaleDateString()} ${hour}:${minutes}:00`;\n    const formattedDate = new Date(formattedTime);\n    return isNaN(formattedDate.getTime()) ? new Date() : formattedDate;\n  };\n\n  const normalizeNumber = (num: any) => String(num || '').replace(/\\D/g, '');\n\n  const searchData = (data: Meeting[], term: string, dateRange: [Date | null, Date | null]) => {\n    const [startDate, endDate] = dateRange;\n    const searchValue = term.toLowerCase().trim();\n\n    return data.filter((meeting) => {\n      const clientName = (meeting.clientName || '').toLowerCase().trim();\n      const clientNumber = normalizeNumber(meeting.clientNumber || '');\n\n      const isSearchMatch =\n        clientName.includes(searchValue) || clientNumber.includes(searchValue);\n\n      const meetingDate = new Date(meeting.date);\n\n      const isDateMatch =\n        startDate && endDate\n          ? meetingDate >= startDate && meetingDate <= endDate\n          : startDate\n          ? meetingDate.toDateString() === startDate.toDateString()\n          : true;\n\n      return isSearchMatch && isDateMatch;\n    });\n  };\n\n  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.target.value);\n  };\n\n  const handleDateChange = (update: [Date | null, Date | null]) => {\n    setDateRange(update);\n  };\n\n  const calculateTotalTime = (meeting: Meeting) => {\n    if (!meeting.time || !meeting.statusTime) return 'N/A';\n    try {\n      const startTime = timeToDate(meeting.time);\n      const endTime = timeToDate(meeting.statusTime);\n      const diffMs = endTime.getTime() - startTime.getTime();\n      if (diffMs < 0) return 'N/A';\n      const hours = Math.floor(diffMs / (1000 * 60 * 60));\n      const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n      return hours === 0 ? `${minutes}m` : `${hours}h ${minutes}m`;\n    } catch {\n      return 'N/A';\n    }\n  };\n\n  const getStatusClass = (status: string) => {\n    switch (status) {\n      case 'yes':\n        return 'bg-green-100 text-green-800 dark:bg-green-600 dark:text-green-100';\n      case 'no':\n        return 'bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100';\n      case 'Pending':\n        return 'bg-orange-100 text-orange-800 dark:bg-orange-800 dark:text-orange-100';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100';\n    }\n  };\n\n  const filteredMeetings = searchData(meetings, searchTerm, dateRange);\n\n\n\n  const handleClearFilters = () => {\n    setSearchTerm('');\n    setDateRange([null, null]);\n  };\n\n\n  const isFilterActive = !!searchTerm || !!dateRange[0] || !!dateRange[1];\n  \n  \n\n\n \n    // Function to determine if the status should be green\n    const getStatusStyle = (meeting: Meeting) => {\n      const dateObject = new Date(meeting.date);\n      const [hours, minutes, period] = meeting.time.split(/[: ]/);\n      let timeObject = new Date(dateObject);\n    \n      // Convert the time into 24-hour format\n      let hours24 = parseInt(hours, 10);\n      if (period === \"pm\" && hours24 !== 12) {\n        hours24 += 12;\n      } else if (period === \"am\" && hours24 === 12) {\n        hours24 = 0;\n      }\n    \n      timeObject.setHours(hours24, parseInt(minutes, 10), 0, 0);\n    \n      const markDateObject = new Date(meeting.markDate);\n      const studentResponseTime = meeting.studentResponseTime ? new Date(meeting.studentResponseTime) : null;\n    \n      // Calculate the time difference in hours\n      const timeDiff = (markDateObject.getTime() - timeObject.getTime()) / (1000 * 60 * 60);\n      const isBeforeTrainingTime = timeDiff <= 12;\n    \n      if (!studentResponseTime) {\n        return {}; // No response yet, return default style (Pending)\n      }\n    \n      // New logic for status styling\n      switch (meeting.status?.toLowerCase()) {\n        case 'yes':\n          // Green if the response is before 12 hours of the meeting time\n          return isBeforeTrainingTime\n            ? 'bg-green-100 text-green-800 dark:bg-green-600 dark:text-green-100'\n            : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-600 dark:text-yellow-100';\n    \n        case 'no':\n          // Green if the response is before 12 hours of the meeting time\n          // Or if the response is changed to No after the 12-hour mark\n          return isBeforeTrainingTime || timeDiff > 12\n            ? 'bg-green-100 text-green-800 dark:bg-green-600 dark:text-green-100'\n            : 'bg-orange-100 text-orange-800 dark:bg-orange-800 dark:text-orange-100';\n    \n        case 'pending':\n          return 'bg-orange-100 text-orange-800 dark:bg-orange-800 dark:text-orange-100';\n    \n        default:\n          return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100';\n      }\n    };\n    \n    const exportToPDF = () => {\n    const doc = new jsPDF();\n    const tableData = filteredMeetings.map((meeting) => [\n      meeting.clientName,\n      meeting.clientNumber,\n      formatDate(meeting.date),\n      meeting.time,\n      meeting.status,\n      formatDate(meeting.markDate),\n      meeting.statusTime,\n      meeting.TotalTime,\n    ]);\n\n    doc.text('Gym Attendance Report', 14, 10);\n    doc.autoTable({\n      head: [['Client Name', 'Client Number', 'Date', 'Time', 'Status','Status Time', 'Total Time']],\n      body: tableData,\n      startY: 20, // Optional: Adjust starting Y position for the table\n    });\n    doc.save('Gym_Attendance_Report.pdf');\n  };\n\n  const exportToExcel = () => {\n    const excelData = filteredMeetings.map((meeting) => ({\n      'Client Name': meeting.clientName || 'N/A',\n      'Client Number': meeting.clientNumber || 'N/A',\n      Date: formatDate(meeting.date) || 'N/A',\n      Time: meeting.time || 'N/A',\n      Status: meeting.status || 'N/A',\n      'Status Time': meeting.statusTime || 'N/A',\n      'Total Time': meeting.TotalTime || 'N/A',\n    }));\n  \n    const worksheet = XLSX.utils.json_to_sheet(excelData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Gym_Attendance');\n    XLSX.writeFile(workbook, 'Gym_Attendance_Report.xlsx');\n  };\n\n  if (loading) {\n    return (\n      <div className=\"p-4 text-center text-gray-800 dark:text-white\">\n        Loading...\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen bg-white p-4 dark:bg-gray-900\">\n      <div className=\"mb-6 flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold text-gray-800 dark:text-white\">\n          GYM Attendance Report Data\n        </h1>\n\n        {/* Export Button with Dropdown */}\n        <div className=\"relative\" ref={dropdownRef}>\n          <button\n            onClick={() => setIsDropdownOpen(!isDropdownOpen)}\n            className=\"rounded-md bg-blue-500 px-4 py-2 text-white hover:bg-blue-600\"\n          >\n            Export\n          </button>\n          {isDropdownOpen && (\n            <div className=\"absolute right-0 mt-2 w-48 bg-white shadow-lg rounded-md z-10\">\n              <button\n                onClick={exportToPDF}\n                className=\"block w-full px-4 py-2 text-gray-800 hover:bg-gray-200 text-left\"\n              >\n                Export to PDF\n              </button>\n              <button\n                onClick={exportToExcel}\n                className=\"block w-full px-4 py-2 text-gray-800 hover:bg-gray-200 text-left\"\n              >\n                Export to Excel\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"mb-4 flex items-center gap-4\">\n        <div className=\"relative w-full max-w-md\">\n          <Input\n            type=\"text\"\n            placeholder=\"Search by client name or number...\"\n            value={searchTerm}\n            onChange={handleSearch}\n            className=\"pl-10\"\n          />\n          <FaSearch className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 transform text-gray-400\" />\n        </div>\n\n        <div className=\"relative\">\n          <DatePicker\n            selectsRange={true}\n            onChange={(update) => handleDateChange(update)}\n            isClearable={true}\n            placeholderText=\"Select date or date range\"\n            className=\"w-full rounded-md border px-3 py-2 text-sm text-gray-800 dark:bg-gray-800 dark:text-white\"\n            dateFormat=\"dd/MM/yyyy\"\n          />\n          <FaCalendarAlt className=\"absolute right-3 top-1/2 h-5 w-5 -translate-y-1/2 transform text-gray-400\" />\n        </div>\n\n        {isFilterActive && (\n          <button\n            onClick={handleClearFilters}\n            className=\"rounded-md bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 dark:bg-blue-700 dark:hover:bg-blue-800\"\n          >\n            Clear Filters\n          </button>\n        )}\n      </div>\n\n      <ScrollArea className=\"h-[calc(100vh-230px)] overflow-auto rounded-md border border-gray-200 dark:border-gray-700\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full table-auto text-sm\">\n            <thead>\n              <tr className=\"sticky top-0 bg-gray-100 px-4 py-3 text-center font-semibold text-gray-700 dark:bg-gray-700 dark:text-white\">\n                <th>Client Name</th>\n                <th>Client Number</th>\n                <th>Date</th>\n                <th>Time</th>\n                <th>Status</th>\n                <th>Status Time</th>\n                <th>Total Time</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n  {filteredMeetings.map((meeting) => (\n    <tr\n      key={meeting._id}\n      className=\"hover:bg-gray-50 dark:hover:bg-gray-700\"\n    >\n      <td className=\"px-4 py-3 text-center text-gray-800 dark:text-white\">\n        {meeting.clientName || 'N/A'}\n      </td>\n      <td className=\"whitespace-nowrap px-4 py-3 text-center text-gray-800 dark:text-white\">\n        {meeting.clientNumber || 'N/A'}\n      </td>\n      <td className=\"px-4 py-3 text-center text-gray-800 dark:text-white\">\n        {meeting.date ? formatDate(meeting.date) : 'N/A'}\n      </td>\n      <td className=\"px-4 py-3 text-center text-gray-800 dark:text-white\">\n        {meeting.time || 'N/A'}\n      </td>\n      <td className=\"px-4 py-3 text-center\">\n                    <span\n                      className={`inline-flex rounded-full px-3 py-1 text-xs font-medium ${getStatusClass(\n                        meeting.status\n                      )}`}\n                    >\n                      {meeting.status || 'N/A'}\n                    </span>\n                  </td>\n\n      <td className=\"px-4 py-3 text-center text-gray-800 dark:text-white\">\n        {meeting.statusTime || 'N/A'}\n      </td>\n      <td className=\"px-4 py-3 text-center text-gray-800 dark:text-white\">\n        {meeting.TotalTime || calculateTotalTime(meeting)}\n      </td>\n    </tr>\n  ))}\n</tbody>\n          </table>\n        </div>\n      </ScrollArea>\n    </div>\n  );\n};\n\nexport default GymDashboard;\n","D:\\Gym-Dashboard-main\\app\\(dashboard)\\dashboard\\user\\page.tsx",[],[],"D:\\Gym-Dashboard-main\\app\\(dashboard)\\dashboard\\user\\[userId]\\page.tsx",[],[],"D:\\Gym-Dashboard-main\\app\\api\\addclient\\route.ts",["495"],[],"import { NextRequest, NextResponse } from 'next/server';\nimport { MongoClient, MongoClientOptions } from 'mongodb';\n\n// MongoDB connection URI\nconst uri = process.env.MONGODB_URI || '';\nconst options: MongoClientOptions = {\n  serverSelectionTimeoutMS: 5000,\n  connectTimeoutMS: 100000\n};\n\n// Function to get MongoDB client\nasync function getMongoClient() {\n  const client = new MongoClient(uri, options);\n  await client.connect();\n  return client;\n}\n\n// POST request to add new client data\nexport async function POST(request: NextRequest) {\n  let client: MongoClient | null = null;\n\n  try {\n    client = await getMongoClient();\n    const db = client.db('Gym_Management');\n    const collection = db.collection('clients');\n\n    // Extract data from request\n    const { clientName, clientNumber, role } = await request.json();\n\n    // Basic validation\n    if (!clientName || !clientNumber || !role) {\n      return NextResponse.json(\n        { success: false, message: 'All fields are required' },\n        { status: 400 }\n      );\n    }\n\n    // Create new client object\n    const newClient = { clientName, clientNumber, role };\n\n    // Insert data into MongoDB\n    const result = await collection.insertOne(newClient);\n\n    return NextResponse.json(\n      {\n        success: true,\n        message: 'Client added successfully',\n        data: { _id: result.insertedId, ...newClient }\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error('Error adding client:', error);\n    return NextResponse.json(\n      { success: false, message: 'Error adding client' },\n      { status: 500 }\n    );\n  } finally {\n    if (client) {\n      await client.close();\n    }\n  }\n}\n","D:\\Gym-Dashboard-main\\app\\api\\auth\\[...nextauth]\\route.ts",[],[],"D:\\Gym-Dashboard-main\\app\\api\\carbot\\route.ts",["496","497","498","499","500"],[],"import { NextRequest, NextResponse } from 'next/server';\nimport { MongoClient, MongoClientOptions } from 'mongodb';\n\nconst uri = process.env.MONGODB_URI || '';\n\nconst options: MongoClientOptions = {\n  serverSelectionTimeoutMS: 5000, // 5 seconds\n  connectTimeoutMS: 10000 // 10 seconds\n};\n\nasync function getMongoClient() {\n  console.log('Attempting to connect to MongoDB...');\n  const client = new MongoClient(uri, options);\n  await client.connect();\n  console.log('Successfully connected to MongoDB');\n  return client;\n}\n\nexport const dynamic = 'force-dynamic';\nexport async function GET(request: NextRequest) {\n  let client: MongoClient | null = null;\n\n  try {\n    client = await getMongoClient();\n    const db = client.db('carbot'); // Specify the database name\n    const carbot = await db.collection('carbots').find({}).toArray();\n\n    console.log(`Retrieved ${carbot.length} documents from the database`);\n\n    return NextResponse.json(\n      {\n        success: true,\n        message: 'Data fetched Successfully',\n        data: carbot\n      },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Error in Fetching', error);\n\n    let errorMessage = 'Error in Fetching';\n    if (error instanceof Error) {\n      errorMessage += ': ' + error.message;\n    }\n\n    return NextResponse.json(\n      {\n        success: false,\n        message: errorMessage\n      },\n      { status: 500 }\n    );\n  } finally {\n    if (client) {\n      await client.close();\n      console.log('MongoDB connection closed');\n    }\n  }\n}\n","D:\\Gym-Dashboard-main\\app\\api\\clientdata\\route.ts",["501","502","503","504","505"],[],"import { NextRequest, NextResponse } from 'next/server';\nimport { MongoClient, MongoClientOptions } from 'mongodb';\n\nconst uri = process.env.MONGODB_URI || '';\n\nconst options: MongoClientOptions = {\n  serverSelectionTimeoutMS: 5000, // 5 seconds\n  connectTimeoutMS: 100000 // 10 seconds\n};\n\nasync function getMongoClient() {\n  console.log('Attempting to connect to MongoDB...');\n  const client = new MongoClient(uri, options);\n  await client.connect();\n  console.log('Successfully connected to MongoDB');\n  return client;\n}\n\nexport const dynamic = 'force-dynamic';\nexport async function GET(request: NextRequest) {\n  let client: MongoClient | null = null;\n\n  try {\n    client = await getMongoClient();\n    const db = client.db('Gym_Management'); // Updated database name\n    const Gym_Management = await db.collection('clients').find({}).toArray(); // Updated collection name\n\n    console.log(\n      `Retrieved ${Gym_Management.length} documents from the database`\n    );\n\n    const formattedData = Gym_Management.map((doc) => ({\n      _id: doc._id,\n      clientName: doc.clientName,\n      clientNumber: doc.clientNumber,\n      role: doc.role\n    }));\n\n    return NextResponse.json(\n      {\n        success: true,\n        message: 'Data fetched successfully',\n        data: formattedData\n      },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Error in Fetching', error);\n\n    let errorMessage = 'Error in Fetching';\n    if (error instanceof Error) {\n      errorMessage += ': ' + error.message;\n    }\n\n    return NextResponse.json(\n      {\n        success: false,\n        message: errorMessage\n      },\n      { status: 500 }\n    );\n  } finally {\n    if (client) {\n      await client.close();\n      console.log('MongoDB connection closed');\n    }\n  }\n}\n","D:\\Gym-Dashboard-main\\app\\api\\delete\\route.ts",["506","507","508","509"],[],"import { NextRequest, NextResponse } from 'next/server';\nimport { MongoClient, ObjectId } from 'mongodb';\n\nconst uri = process.env.MONGODB_URI || '';\n\nasync function getMongoClient() {\n  const client = new MongoClient(uri);\n  await client.connect();\n  return client;\n}\n\nexport const dynamic = 'force-dynamic';\n\nexport async function DELETE(request: NextRequest) {\n  let client: MongoClient | null = null;\n\n  try {\n    const url = new URL(request.url);\n    const id = url.searchParams.get('id');\n    console.log('Received ID for deletion:', id);\n\n    if (!id) {\n      return NextResponse.json(\n        { success: false, message: 'Meeting ID is required.' },\n        { status: 400 }\n      );\n    }\n\n    client = await getMongoClient();\n    const db = client.db();\n\n    let objectId;\n    try {\n      objectId = new ObjectId(id);\n    } catch (error) {\n      console.error('Invalid ObjectId format:', id);\n      return NextResponse.json(\n        { success: false, message: 'Invalid meeting ID format.' },\n        { status: 400 }\n      );\n    }\n\n    // Delete the meeting from the collection\n    const deleteResult = await db\n      .collection('carbot')\n      .deleteOne({ _id: objectId });\n\n    console.log('Delete result:', deleteResult);\n\n    if (deleteResult.deletedCount === 0) {\n      return NextResponse.json(\n        { success: false, message: 'Meeting not found or already deleted.' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json(\n      { success: true, message: 'Meeting deleted successfully.' },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Error deleting meeting:', error);\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    return NextResponse.json(\n      {\n        success: false,\n        message: `An error occurred while deleting the meeting: ${errorMessage}`\n      },\n      { status: 500 }\n    );\n  } finally {\n    if (client) {\n      await client.close();\n    }\n  }\n}\n\n// Include your existing GET, POST, or other methods here\n// For example:\n// export async function GET(request: NextRequest) { ... }\n// export async function POST(request: NextRequest) { ... }\n","D:\\Gym-Dashboard-main\\app\\api\\Gym_Management\\route.ts",["510","511","512","513","514"],[],"import { NextRequest, NextResponse } from 'next/server';\nimport { MongoClient, MongoClientOptions } from 'mongodb';\n\nconst uri = process.env.MONGODB_URI || '';\n\nconst options: MongoClientOptions = {\n  serverSelectionTimeoutMS: 5000, // 5 seconds\n  connectTimeoutMS: 100000// 10 seconds\n};\n\nasync function getMongoClient() {\n  console.log('Attempting to connect to MongoDB...');\n  const client = new MongoClient(uri, options);\n  await client.connect();\n  console.log('Successfully connected to MongoDB');\n  return client;\n}\n\n// Function to calculate the Total Time between time and statusTime\n\nconst calculateTotalTime = (markDate: string, statusTime: string) => {\n  if (!markDate || !statusTime) return 'N/A';\n\n  const startTime = new Date(markDate);\n  const endTime = new Date(statusTime);\n\n  // दोनों तारीखों का अंतर (milliseconds में)\n  const diffMs = Math.abs(endTime.getTime() - startTime.getTime());\n\n  // अंतर को घंटों और मिनटों में बदलना\n  const hours = Math.floor(diffMs / (1000 * 60 * 60));\n  const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n  return `${hours}h ${minutes}m`;\n};\n\nexport const dynamic = 'force-dynamic';\nexport async function GET(request: NextRequest) {\n  let client: MongoClient | null = null;\n\n  try {\n    client = await getMongoClient();\n    const db = client.db('Gym_Management');\n    const Gym_Management = await db.collection('marks').find({}).toArray();\n\n    // Format data and calculate Total Time\n    const formattedData = Gym_Management.map((doc) => {\n      const totalTime = calculateTotalTime(doc.time, doc.statusTime);\n\n      return {\n        _id: doc._id,\n        clientName: doc.clientName,\n        clientNumber: doc.clientNumber,\n        date: new Date(doc.date).toLocaleString(),\n        time: doc.time,\n        status: doc.status,\n        markDate: new Date(doc.markDate).toLocaleString(),\n        statusTime: doc.statusTime\n          ? new Date(doc.statusTime).toLocaleString()\n          : null,\n        totalTime: totalTime, // Adding Total Time to the response\n        __v: doc.__v\n      };\n    });\n\n    console.log(\n      `Retrieved ${formattedData.length} documents from the database`\n    );\n\n    return NextResponse.json(\n      {\n        success: true,\n        message: 'Data fetched successfully',\n        data: formattedData\n      },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Error in Fetching', error);\n\n    let errorMessage = 'Error in Fetching';\n    if (error instanceof Error) {\n      errorMessage += ': ' + error.message;\n    }\n\n    return NextResponse.json(\n      {\n        success: false,\n        message: errorMessage\n      },\n      { status: 500 }\n    );\n  } finally {\n    if (client) {\n      await client.close();\n      console.log('MongoDB connection closed');\n    }\n  }\n}\n","D:\\Gym-Dashboard-main\\app\\api\\momDatas\\route.ts",["515","516","517","518","519"],[],"import { NextRequest, NextResponse } from 'next/server';\nimport { MongoClient, MongoClientOptions } from 'mongodb';\n\nconst uri = process.env.MONGODB_URI || '';\n\nconst options: MongoClientOptions = {\n  serverSelectionTimeoutMS: 5000, // 5 seconds\n  connectTimeoutMS: 10000 // 10 seconds\n};\n\nasync function getMongoClient() {\n  console.log('Attempting to connect to MongoDB...');\n  const client = new MongoClient(uri, options);\n  await client.connect();\n  console.log('Successfully connected to MongoDB');\n  return client;\n}\n\nexport const dynamic = 'force-dynamic';\nexport async function GET(request: NextRequest) {\n  let client: MongoClient | null = null;\n\n  try {\n    client = await getMongoClient();\n    const db = client.db('momDatas'); // Specify the database name\n    const momDatas = await db.collection('datamoms').find({}).toArray();\n\n    console.log(`Retrieved ${momDatas.length} documents from the database`);\n\n    return NextResponse.json(\n      {\n        success: true,\n        message: 'Data fetched Successfully',\n        data: momDatas\n      },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Error in Fetching', error);\n\n    let errorMessage = 'Error in Fetching';\n    if (error instanceof Error) {\n      errorMessage += ': ' + error.message;\n    }\n\n    return NextResponse.json(\n      {\n        success: false,\n        message: errorMessage\n      },\n      { status: 500 }\n    );\n  } finally {\n    if (client) {\n      await client.close();\n      console.log('MongoDB connection closed');\n    }\n  }\n}\n","D:\\Gym-Dashboard-main\\app\\api\\uploadthing\\core.ts",[],[],"D:\\Gym-Dashboard-main\\app\\api\\uploadthing\\route.ts",[],[],"D:\\Gym-Dashboard-main\\app\\layout.tsx",[],[],"D:\\Gym-Dashboard-main\\app\\not-found.tsx",[],[],"D:\\Gym-Dashboard-main\\app\\page.tsx",["520"],[],"'use client';\nimport { Loader2 } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport React, { useEffect } from 'react';\n\nconst Home = () => {\n  const router = useRouter();\n  useEffect(() => {\n    router.push('/dashboard');\n  }, []);\n  return (\n    <div className=\"m-4 flex items-center justify-center\">\n      <div className=\"flex flex-row\">\n        <Loader2 className=\"animate-spin\" />\n        Loading...\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","D:\\Gym-Dashboard-main\\components\\breadcrumb.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\dashboard-nav.tsx",["521","522"],[],"'use client';\n\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\n\nimport { Icons } from '@/components/icons';\nimport { cn } from '@/lib/utils';\nimport { NavItem } from '@/types';\nimport { Dispatch, SetStateAction } from 'react';\nimport { useSidebar } from '@/hooks/useSidebar';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger\n} from './ui/tooltip';\n\ninterface DashboardNavProps {\n  items: NavItem[];\n  setOpen?: Dispatch<SetStateAction<boolean>>;\n  isMobileNav?: boolean;\n}\n\nexport function DashboardNav({\n  items,\n  setOpen,\n  isMobileNav = false\n}: DashboardNavProps) {\n  const path = usePathname();\n  const { isMinimized } = useSidebar();\n\n  if (!items?.length) {\n    return null;\n  }\n\n  console.log('isActive', isMobileNav, isMinimized);\n\n  return (\n    <nav className=\"grid items-start gap-2\">\n      <TooltipProvider>\n        {items.map((item, index) => {\n          const Icon = Icons[item.icon || 'arrowRight'];\n          return (\n            item.href && (\n              <Tooltip key={index}>\n                <TooltipTrigger asChild>\n                  <a\n                    href={item.disabled ? '/' : item.href}\n                    className={cn(\n                      'flex items-center gap-2 overflow-hidden rounded-md py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground',\n                      path === item.href ? 'bg-accent' : 'transparent',\n                      item.disabled && 'cursor-not-allowed opacity-80'\n                    )}\n                    onClick={() => {\n                      if (setOpen) setOpen(false);\n                    }}\n                  >\n                    <Icon className={`ml-3 size-5`} />\n\n                    {isMobileNav || (!isMinimized && !isMobileNav) ? (\n                      <span className=\"mr-2 truncate\">{item.title}</span>\n                    ) : (\n                      ''\n                    )}\n                  </a>\n                </TooltipTrigger>\n                <TooltipContent\n                  align=\"center\"\n                  side=\"right\"\n                  sideOffset={8}\n                  className={!isMinimized ? 'hidden' : 'inline-block'}\n                >\n                  {item.title}\n                </TooltipContent>\n              </Tooltip>\n            )\n          );\n        })}\n      </TooltipProvider>\n    </nav>\n  );\n}\n","D:\\Gym-Dashboard-main\\components\\date-range-picker.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\file-upload.tsx",["523","524","525","526"],[],"'use client';\nimport { OurFileRouter } from '@/app/api/uploadthing/core';\nimport { UploadDropzone } from '@uploadthing/react';\nimport { Trash } from 'lucide-react';\nimport Image from 'next/image';\nimport { UploadFileResponse } from 'uploadthing/client';\nimport { Button } from './ui/button';\nimport { useToast } from './ui/use-toast';\n\ninterface ImageUploadProps {\n  onChange?: any;\n  onRemove: (value: UploadFileResponse[]) => void;\n  value: UploadFileResponse[];\n}\n\nexport default function FileUpload({\n  onChange,\n  onRemove,\n  value\n}: ImageUploadProps) {\n  const { toast } = useToast();\n  const onDeleteFile = (key: string) => {\n    const files = value;\n    let filteredFiles = files.filter((item) => item.key !== key);\n    onRemove(filteredFiles);\n  };\n  const onUpdateFile = (newFiles: UploadFileResponse[]) => {\n    onChange([...value, ...newFiles]);\n  };\n  return (\n    <div>\n      <div className=\"mb-4 flex items-center gap-4\">\n        {!!value.length &&\n          value?.map((item) => (\n            <div\n              key={item.key}\n              className=\"relative h-[200px] w-[200px] overflow-hidden rounded-md\"\n            >\n              <div className=\"absolute right-2 top-2 z-10\">\n                <Button\n                  type=\"button\"\n                  onClick={() => onDeleteFile(item.key)}\n                  variant=\"destructive\"\n                  size=\"sm\"\n                >\n                  <Trash className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              <div>\n                <Image\n                  fill\n                  className=\"object-cover\"\n                  alt=\"Image\"\n                  src={item.fileUrl || ''}\n                />\n              </div>\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n}\n","D:\\Gym-Dashboard-main\\components\\github-auth-button.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\icons.tsx",["527"],[],"import {\n  AlertTriangle,\n  ArrowRight,\n  Check,\n  ChevronLeft,\n  ChevronRight,\n  CircuitBoardIcon,\n  Command,\n  // Import ContactRound here\n  CreditCard,\n  File,\n  FileText,\n  HelpCircle,\n  Image,\n  Laptop,\n  LayoutDashboardIcon,\n  Loader2,\n  LogIn,\n  LucideIcon,\n  LucideProps,\n  Moon,\n  MoreVertical,\n  Pizza,\n  Plus,\n  Settings,\n  SunMedium,\n  Trash,\n  Twitter,\n  Users,\n  User2Icon,\n  UserX2Icon,\n  Star,\n  Sparkle,\n  X,\n  BadgeDollarSign,\n  UserPlus,\n  DollarSign,\n  Store\n} from 'lucide-react';\n\nexport type Icon = LucideIcon;\n\nexport const Icons = {\n  dashboard: LayoutDashboardIcon,\n  MVRS: CircuitBoardIcon,\n  KOC: Star,\n  logo: Command,\n  login: LogIn,\n  close: X,\n  profile: User2Icon,\n  spinner: Loader2,\n  kanban: CircuitBoardIcon,\n  chevronLeft: ChevronLeft,\n  chevronRight: ChevronRight,\n  trash: Trash,\n  employee: UserX2Icon,\n  post: FileText,\n  page: File,\n  media: Image,\n  settings: Settings,\n  billing: CreditCard,\n  ellipsis: MoreVertical,\n  add: Plus,\n  warning: AlertTriangle,\n  user: Users,\n  arrowRight: ArrowRight,\n  help: HelpCircle,\n  pizza: Pizza,\n  sun: SunMedium,\n  moon: Moon,\n  laptop: Laptop,\n  addmoney: BadgeDollarSign,\n  addEmployee: UserPlus,\n  addExpense: DollarSign,\n  branchIcon: Store,\n\n  gitHub: ({ ...props }: LucideProps) => (\n    <svg\n      aria-hidden=\"true\"\n      focusable=\"false\"\n      data-prefix=\"fab\"\n      data-icon=\"github\"\n      role=\"img\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 496 512\"\n      {...props}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3 .3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5 .3-6.2 2.3zm44.2-1.7c-2.9 .7-4.9 2.6-4.6 4.9 .3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3 .7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3 .3 2.9 2.3 3.9 1.6 1 3.6 .7 4.3-.7 .7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3 .7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3 .7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\"\n      ></path>\n    </svg>\n  ),\n  twitter: Twitter,\n  check: Check\n};\n","D:\\Gym-Dashboard-main\\components\\layout\\header.tsx",["528","529"],[],"import ThemeToggle from '@/components/layout/ThemeToggle/theme-toggle';\nimport { cn } from '@/lib/utils';\nimport { MobileSidebar } from './mobile-sidebar';\nimport { UserNav } from './user-nav';\nimport Link from 'next/link';\n\nexport default function Header() {\n  return (\n    <div className=\"supports-backdrop-blur:bg-background/60 fixed left-0 right-0 top-0 z-20 border-b bg-background/95 backdrop-blur\">\n      <nav className=\"flex h-14 items-center justify-between px-4\">\n        <div className=\"flex hidden w-[80px] justify-center lg:block lg:w-auto\">\n          <Link href={'/'}>\n            <div className=\"flex items-center space-x-2\">\n              <img\n                src=\"https://w7.pngwing.com/pngs/1018/952/png-transparent-man-holding-barbell-garage-gym-fitness-centre-computer-icons-physical-fitness-bodybuilding-white-logo-monochrome-thumbnail.png\"\n                alt=\"logo\"\n                width={70}\n                height={90}\n                className=\"mt-2 object-contain\"\n              />\n              <span className=\"text-2xl font-bold\">GYM Dashbord</span>\n            </div>\n          </Link>\n        </div>\n\n        <div className={cn('block lg:!hidden')}>\n          <MobileSidebar />\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          {/* <UserNav /> */}\n          <ThemeToggle />\n        </div>\n      </nav>\n    </div>\n  );\n}\n","D:\\Gym-Dashboard-main\\components\\layout\\mobile-sidebar.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\layout\\providers.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\layout\\sidebar-old.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\layout\\sidebar.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\layout\\ThemeToggle\\theme-provider.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\layout\\ThemeToggle\\theme-toggle.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\layout\\user-nav.tsx",["530"],[],"'use client';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuTrigger\n} from '@/components/ui/dropdown-menu';\nimport { signOut, useSession } from 'next-auth/react';\nexport function UserNav() {\n  const { data: session } = useSession();\n  if (session) {\n    return (\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n            <Avatar className=\"h-8 w-8\">\n              <AvatarImage\n                src={session.user?.image ?? ''}\n                alt={session.user?.name ?? ''}\n              />\n              {/* <AvatarFallback>{session.user?.name?.[0]}</AvatarFallback> */}\n              <AvatarFallback>RB</AvatarFallback>\n            </Avatar>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n          <DropdownMenuLabel className=\"font-normal\">\n            <div className=\"flex flex-col space-y-1\">\n              <p className=\"text-sm font-medium leading-none\">\n                {/* {session.user?.name} */}\n                Dashboard\n              </p>\n              <p className=\"text-xs leading-none text-muted-foreground\">\n                {session.user?.email}\n              </p>\n            </div>\n          </DropdownMenuLabel>\n          <DropdownMenuSeparator />\n          {/* <DropdownMenuGroup>\n            <DropdownMenuItem>\n              Profile\n              <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>\n            </DropdownMenuItem>\n            <DropdownMenuItem>\n              Billing\n              <DropdownMenuShortcut>⌘B</DropdownMenuShortcut>\n            </DropdownMenuItem>\n            <DropdownMenuItem>\n              Settings\n              <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>\n            </DropdownMenuItem>\n            <DropdownMenuItem>New Team</DropdownMenuItem>\n          </DropdownMenuGroup> */}\n          {/* <DropdownMenuSeparator /> */}\n          <DropdownMenuItem onClick={() => signOut()}>\n            Log out\n            <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    );\n  }\n}\n","D:\\Gym-Dashboard-main\\components\\overview.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\recent-audits.tsx",["531","532","533"],[],"'use client';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Button } from './ui/button';\ninterface RecentAuditsProps {\n  onEmployeeData: (data: any) => void;\n}\nexport function RecentAudits({ onEmployeeData }: RecentAuditsProps) {\n  const [topEmployees, setTopEmployees] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchTopAudits = async () => {\n    setIsLoading(true);\n    try {\n      const config = {\n        method: 'get',\n        maxBodyLength: Infinity,\n        url: 'https://chatwithpdf.in/rnb_callbackurl/get-mvr-count',\n        headers: {}\n      };\n\n      const response = await axios.request(config);\n      const data = response.data.summary; // Accessing the summary array\n      // Transforming the data to a more usable format\n      const formattedData = data.map((employee: any) => {\n        const name = Object.keys(employee)[0]; // Get the employee name\n        const details = employee[name]; // Get the details for that employee\n        return {\n          name,\n          count: details.count,\n          shopNames: details.shopNames\n        };\n      });\n      setTopEmployees(formattedData);\n      onEmployeeData(response.data);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTopAudits();\n  }, []);\n\n  return (\n    <div className=\"space-y-8\">\n      {isLoading ? (\n        <div className=\"mt-40 flex h-full items-center justify-center\">\n          <svg\n            className=\"h-8 w-8 animate-spin text-gray-600\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n          >\n            <circle\n              className=\"opacity-25\"\n              cx=\"12\"\n              cy=\"12\"\n              r=\"10\"\n              stroke=\"currentColor\"\n              strokeWidth=\"4\"\n            ></circle>\n            <path\n              className=\"opacity-75\"\n              fill=\"currentColor\"\n              d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z\"\n            ></path>\n          </svg>\n        </div>\n      ) : (\n        topEmployees.map((employee: any) => (\n          <div key={employee.name} className=\"flex items-center\">\n            <Avatar className=\"h-9 w-9\">\n              <AvatarFallback>{employee.name.charAt(0)}</AvatarFallback>\n            </Avatar>\n            <div className=\"flex  w-full items-start justify-between\">\n              <div className=\"ml-4 space-y-1\">\n                <p className=\"text-sm font-medium leading-none\">\n                  {employee.name}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Total Audits: {employee.count}\n                </p>\n              </div>\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n}\n","D:\\Gym-Dashboard-main\\components\\tables\\audit-table\\cell-actions.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\tables\\audit-table\\columns.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\tables\\audit-table\\components\\last-audit-marks-chart.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\tables\\audit-table\\components\\last-audit-marks-improvement.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\tables\\audit-table\\components\\last-audit-marks-inline.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\tables\\audit-table\\table.tsx",["534"],["535"],"'use client';\nimport { useEffect, useState } from 'react';\nimport columns from './columns';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from '@/components/ui/select';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow\n} from '@/components/ui/table';\nimport {\n  DoubleArrowLeftIcon,\n  DoubleArrowRightIcon\n} from '@radix-ui/react-icons';\nimport { ChevronLeftIcon, ChevronRightIcon } from 'lucide-react';\nimport { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';\n\nimport {\n  getCoreRowModel,\n  flexRender,\n  getPaginationRowModel,\n  useReactTable,\n  ColumnFiltersState\n} from '@tanstack/react-table';\nimport { Button } from '@/components/ui/button';\n\ninterface PaginationState {\n  pageIndex: number;\n  pageSize: number;\n}\n\nconst AuditTable = ({ data }: { data: any[] }) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [searchValue, setSearchValue] = useState<string>('');\n  const [combinedData, setCombinedData] = useState<any[]>([]);\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);\n  const [{ pageIndex, pageSize }, setPagination] = useState<PaginationState>({\n    pageIndex: 0,\n    pageSize: 50\n  });\n\n  const combiningData = async () => {\n    // A helper function to initialize the audit structure\n    const initializeAudit = () => ({\n      unAnnounced: { lastAuditMark: 0, noOfAudit: 0, noOfDays: 0 },\n      announced: { lastAuditMark: 0, noOfAudit: 0, noOfDays: 0 }\n    });\n\n    // A helper function to process each record\n    const processRecord = (record: any, auditType: string) => {\n      const audit = {\n        lastAuditMark: parseInt(record.freshnessOfGoods) || 0, // Example field, replace with appropriate one\n        noOfAudit: parseInt(record.freshnessOfGoods) || 0, // Example field, replace with appropriate one\n        noOfDays: parseInt(record.varietyOfGoods) || 0 // Example field, replace with appropriate one\n      };\n      return audit;\n    };\n\n    let filteredData = data;\n    if (searchValue) {\n      filteredData = data.filter((item) =>\n        item.shopName.toLowerCase().includes(searchValue.toLowerCase())\n      );\n    }\n\n    const combinedData = filteredData.reduce((acc, current) => {\n      let shop = acc.find((item: any) => item.shopName === current.shopName);\n\n      if (!shop) {\n        shop = {\n          ...current,\n          shopName: current.shopName,\n          audit: initializeAudit()\n        };\n        acc.push(shop);\n      }\n\n      if (current.announcedUnAnnounced === 'announced') {\n        shop.audit.announced = processRecord(current, 'announced');\n      } else if (current.announcedUnAnnounced === 'unannounced') {\n        shop.audit.unAnnounced = processRecord(current, 'unannounced');\n      }\n\n      return acc;\n    }, []);\n    setCombinedData(combinedData);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    combiningData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, searchValue]);\n\n  const table = useReactTable({\n    data: combinedData,\n    columns,\n    pageCount: Math.ceil(combinedData.length / pageSize),\n    state: { pagination: { pageIndex, pageSize }, columnFilters },\n    onPaginationChange: setPagination,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel()\n  });\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between\">\n        <Input\n          placeholder=\"Search Shop Name...\"\n          value={searchValue}\n          onChange={(event) => setSearchValue(event.target.value)}\n          className=\"mb-3 w-full md:max-w-sm\"\n        />\n        <div className=\"mb-3 flex items-center justify-end gap-2\">\n          <Input\n            value={combinedData.length + ' Records'}\n            readOnly\n            className=\"pointer-events-none w-28 text-blue-500\"\n          />\n        </div>\n      </div>\n\n      <ScrollArea className=\"h-[calc(80vh-220px)] rounded-md border\">\n        {isLoading ? (\n          <div className=\"mt-40 flex h-full items-center justify-center\">\n            <svg\n              className=\"h-8 w-8 animate-spin text-gray-600\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              ></circle>\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z\"\n              ></path>\n            </svg>\n          </div>\n        ) : (\n          <Table className=\"relative\">\n            <TableHeader>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  ))}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows.length ? (\n                table.getRowModel().rows.map((row) => (\n                  <TableRow\n                    key={row.id}\n                    data-state={row.getIsSelected() && 'selected'}\n                  >\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id}>\n                        {flexRender(\n                          cell.column.columnDef.cell,\n                          cell.getContext()\n                        )}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell\n                    colSpan={columns.length}\n                    className=\"h-24 text-center\"\n                  >\n                    No results.\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        )}\n        <ScrollBar orientation=\"horizontal\" />\n      </ScrollArea>\n\n      <div className=\"flex flex-col items-center justify-end gap-2 space-x-2 py-4 sm:flex-row\">\n        <div className=\"flex w-full items-center justify-between\">\n          <div className=\"flex-1 text-sm text-muted-foreground\">\n            {table.getFilteredSelectedRowModel().rows.length} of{' '}\n            {table.getFilteredRowModel().rows.length} row(s) selected.\n          </div>\n          <div className=\"flex flex-col items-center gap-4 sm:flex-row sm:gap-6 lg:gap-8\">\n            <div className=\"flex items-center space-x-2\">\n              <p className=\"whitespace-nowrap text-sm font-medium\">\n                Rows per page\n              </p>\n              <Select\n                value={`${pageSize}`}\n                onValueChange={(value) => table.setPageSize(Number(value))}\n              >\n                <SelectTrigger className=\"h-8 w-[70px]\">\n                  <SelectValue placeholder={pageSize} />\n                </SelectTrigger>\n                <SelectContent side=\"top\">\n                  {[10, 20, 30, 40, 50].map((size) => (\n                    <SelectItem key={size} value={`${size}`}>\n                      {size}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex w-full items-center justify-between gap-2 sm:justify-end\">\n          <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n            Page {pageIndex + 1} of {table.getPageCount()}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              aria-label=\"Go to first page\"\n              variant=\"outline\"\n              className=\"hidden h-8 w-8 p-0 lg:flex\"\n              onClick={() => table.setPageIndex(0)}\n              disabled={!table.getCanPreviousPage()}\n            >\n              <DoubleArrowLeftIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              aria-label=\"Go to previous page\"\n              variant=\"outline\"\n              className=\"h-8 w-8 p-0\"\n              onClick={() => table.previousPage()}\n              disabled={!table.getCanPreviousPage()}\n            >\n              <ChevronLeftIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              aria-label=\"Go to next page\"\n              variant=\"outline\"\n              className=\"h-8 w-8 p-0\"\n              onClick={() => table.nextPage()}\n              disabled={!table.getCanNextPage()}\n            >\n              <ChevronRightIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              aria-label=\"Go to last page\"\n              variant=\"outline\"\n              className=\"hidden h-8 w-8 p-0 lg:flex\"\n              onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n              disabled={!table.getCanNextPage()}\n            >\n              <DoubleArrowRightIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AuditTable;\n","D:\\Gym-Dashboard-main\\components\\tables\\employee-tables\\cell-action.tsx",["536","537","538","539","540"],[],"'use client';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuTrigger\n} from '@/components/ui/dropdown-menu';\nimport { Employee } from '@/constants/data';\nimport { Edit, MoreHorizontal, Trash } from 'lucide-react';\nimport { useParams, useRouter } from 'next/navigation';\nimport { useState } from 'react';\n\ninterface CellActionProps {\n  data: Employee;\n}\n\nexport const CellAction: React.FC<CellActionProps> = ({ data }) => {\n  const [loading, setLoading] = useState(false);\n  const [open, setOpen] = useState(false);\n  const router = useRouter();\n\n  const onConfirm = async () => {};\n\n  return (\n    <>\n      <DropdownMenu modal={false}>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n            <span className=\"sr-only\">Open menu</span>\n            <MoreHorizontal className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n\n          <DropdownMenuItem\n            onClick={() => router.push(`/dashboard/user/${data.id}`)}\n          >\n            <Edit className=\"mr-2 h-4 w-4\" /> Update\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => setOpen(true)}>\n            <Trash className=\"mr-2 h-4 w-4\" /> Delete\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  );\n};\n","D:\\Gym-Dashboard-main\\components\\tables\\employee-tables\\columns.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\tables\\employee-tables\\employee-table.tsx",[],["541","542"],"D:\\Gym-Dashboard-main\\components\\tables\\hocs-table\\cell-action.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\tables\\hocs-table\\columns.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\tables\\hocs-table\\table.tsx",["543"],[],"'use client';\n\nimport { useEffect, useState } from 'react';\nimport columns from './columns';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from '@/components/ui/select';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow\n} from '@/components/ui/table';\nimport {\n  DoubleArrowLeftIcon,\n  DoubleArrowRightIcon\n} from '@radix-ui/react-icons';\nimport { ChevronLeftIcon, ChevronRightIcon } from 'lucide-react';\nimport { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';\n\nimport {\n  useReactTable,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel\n} from '@tanstack/react-table';\nimport axios from 'axios';\ninterface PaginationState {\n  pageIndex: number;\n  pageSize: number;\n}\ninterface DataRow {\n  totalMarks?: number;\n  totalAvgOfMarks?: number;\n  specificStoreAvgOfMarks?: number;\n  totalAvgOfPercents?: number;\n}\nconst HocsTable = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [fetchedData, setFetchedData] = useState<any>([]);\n  const [searchValue, setSearchValue] = useState<string>('');\n  const [{ pageIndex, pageSize }, setPagination] = useState<PaginationState>({\n    pageIndex: 0,\n    pageSize: 10\n  });\n  const extraCalculations = (data: any) => {\n    data.forEach((d:DataRow, i: any) => {\n      let marks = 0;\n      let count = 0;\n\n      Object.values(d).forEach((v) => {\n        if (v === 'Yes') {\n          marks++;\n          count++;\n        } else if (v === 'No') {\n          count++;\n        }\n      });\n\n      data[i].marks = marks;\n      data[i].percent = ((marks / count) * 100).toFixed(2);\n    });\n    // const totalMarks = data.reduce((acc: any, d: DataRow) => acc + d.marks, 0);\n    // const totalMarksPercentage = data.reduce((acc: any, d: DataRow) => acc + d.percent, 0);\n    // const avgOfMarks = data.length;\n    // const avgOfPercents = data.length;\n    // data.forEach((d: Record<string, unknown>, i: any) => {\n    //   d.totalMarks = totalMarks;\n    //   d.totalAvgOfMarks = avgOfMarks;\n    //   d.specificStoreAvgOfMarks = totalMarksPercentage;\n    //   d.totalAvgOfPercents = avgOfPercents;\n    // });\n    setFetchedData(data);\n  };\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\n        'https://chatwithpdf.in/rnb_callbackurl/hocs'\n      );\n      setIsLoading(false);\n      setFetchedData(response.data.data);\n      extraCalculations(response.data.data);\n    } catch (error) {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchData();\n  }, []);\n\n  // const filteredData = fetchedData.filter(item =>\n  //   item.traineeName.toLowerCase().includes(searchValue.toLowerCase())\n  // );\n  // for filter data repace the fetchedData with filteredData\n  const table = useReactTable({\n    data: fetchedData,\n    columns,\n    pageCount: Math.ceil(fetchedData.length / pageSize),\n    state: { pagination: { pageIndex, pageSize } },\n    onPaginationChange: setPagination,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel()\n  });\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between\">\n        <Input\n          placeholder=\"Search...\"\n          value={searchValue}\n          onChange={(event) => setSearchValue(event.target.value)}\n          className=\"mb-3 w-full md:max-w-sm\"\n        />\n        <Input\n          value={fetchedData.length + ' Records'}\n          readOnly\n          className=\"pointer-events-none mb-3 w-fit md:max-w-sm\"\n        />\n      </div>\n      <ScrollArea className=\"h-[calc(80vh-220px)] rounded-md border\">\n        {isLoading ? (\n          <div className=\"mt-40 flex h-full items-center justify-center\">\n            <svg\n              className=\"h-8 w-8 animate-spin text-gray-600\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              ></circle>\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z\"\n              ></path>\n            </svg>\n          </div>\n        ) : (\n          <Table className=\"relative\">\n            <TableHeader>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  ))}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows.length ? (\n                table.getRowModel().rows.map((row) => (\n                  <TableRow\n                    key={row.id}\n                    data-state={row.getIsSelected() && 'selected'}\n                  >\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id}>\n                        {flexRender(\n                          cell.column.columnDef.cell,\n                          cell.getContext()\n                        )}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell\n                    colSpan={columns.length}\n                    className=\"h-24 text-center\"\n                  >\n                    No results.\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        )}\n        <ScrollBar orientation=\"horizontal\" />\n      </ScrollArea>\n\n      <div className=\"flex flex-col items-center justify-end gap-2 space-x-2 py-4 sm:flex-row\">\n        <div className=\"flex w-full items-center justify-between\">\n          <div className=\"flex-1 text-sm text-muted-foreground\">\n            {table.getFilteredSelectedRowModel().rows.length} of{' '}\n            {table.getFilteredRowModel().rows.length} row(s) selected.\n          </div>\n          <div className=\"flex flex-col items-center gap-4 sm:flex-row sm:gap-6 lg:gap-8\">\n            <div className=\"flex items-center space-x-2\">\n              <p className=\"whitespace-nowrap text-sm font-medium\">\n                Rows per page\n              </p>\n              <Select\n                value={`${pageSize}`}\n                onValueChange={(value) => table.setPageSize(Number(value))}\n              >\n                <SelectTrigger className=\"h-8 w-[70px]\">\n                  <SelectValue placeholder={pageSize} />\n                </SelectTrigger>\n                <SelectContent side=\"top\">\n                  {[10, 20, 30, 40, 50].map((size) => (\n                    <SelectItem key={size} value={`${size}`}>\n                      {size}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex w-full items-center justify-between gap-2 sm:justify-end\">\n          <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n            Page {pageIndex + 1} of {table.getPageCount()}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              aria-label=\"Go to first page\"\n              variant=\"outline\"\n              className=\"hidden h-8 w-8 p-0 lg:flex\"\n              onClick={() => table.setPageIndex(0)}\n              disabled={!table.getCanPreviousPage()}\n            >\n              <DoubleArrowLeftIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              aria-label=\"Go to previous page\"\n              variant=\"outline\"\n              className=\"h-8 w-8 p-0\"\n              onClick={() => table.previousPage()}\n              disabled={!table.getCanPreviousPage()}\n            >\n              <ChevronLeftIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              aria-label=\"Go to next page\"\n              variant=\"outline\"\n              className=\"h-8 w-8 p-0\"\n              onClick={() => table.nextPage()}\n              disabled={!table.getCanNextPage()}\n            >\n              <ChevronRightIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              aria-label=\"Go to last page\"\n              variant=\"outline\"\n              className=\"hidden h-8 w-8 p-0 lg:flex\"\n              onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n              disabled={!table.getCanNextPage()}\n            >\n              <DoubleArrowRightIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HocsTable;\n","D:\\Gym-Dashboard-main\\components\\tables\\hosos-table\\cell-actions.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\tables\\hosos-table\\columns.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\tables\\hosos-table\\table.tsx",["544"],[],"'use client';\n\nimport { useEffect, useState } from 'react';\nimport columns from './columns';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from '@/components/ui/select';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow\n} from '@/components/ui/table';\nimport {\n  DoubleArrowLeftIcon,\n  DoubleArrowRightIcon\n} from '@radix-ui/react-icons';\nimport { ChevronLeftIcon, ChevronRightIcon } from 'lucide-react';\nimport { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';\n\nimport {\n  useReactTable,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel\n} from '@tanstack/react-table';\nimport axios from 'axios';\ninterface PaginationState {\n  pageIndex: number;\n  pageSize: number;\n}\ninterface DataRow {\n  totalMarks?: number;\n  totalAvgOfMarks?: number;\n  specificStoreAvgOfMarks?: number;\n  totalAvgOfPercents?: number;\n}\n\nconst HososTable = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [fetchedData, setFetchedData] = useState<any>([]);\n  const [searchValue, setSearchValue] = useState<string>('');\n  const [{ pageIndex, pageSize }, setPagination] = useState<PaginationState>({\n    pageIndex: 0,\n    pageSize: 10\n  });\n  const extraCalculations = (data: any) => {\n    data.forEach((d:DataRow, i: any) => {\n      let marks = 0;\n      let count = 0;\n\n      Object.values(d).forEach((v) => {\n        if (v === 'Yes') {\n          marks++;\n          count++;\n        } else if (v === 'No') {\n          count++;\n        }\n      });\n\n      data[i].marks = marks;\n      data[i].percent = ((marks / count) * 100).toFixed(2);\n    });\n    // const totalMarks = data.reduce((acc: any, d: DataRow) => acc + d.marks, 0);\n    // const totalMarksPercentage = data.reduce((acc: any, d: DataRow) => acc + d.percent, 0);\n    // const avgOfMarks = data.length;\n    // const avgOfPercents = data.length;\n    // data.forEach((d: Record<string, unknown>, i: any) => {\n    //   d.totalMarks = totalMarks;\n    //   d.totalAvgOfMarks = avgOfMarks;\n    //   d.specificStoreAvgOfMarks = totalMarksPercentage;\n    //   d.totalAvgOfPercents = avgOfPercents;\n    // });\n    setFetchedData(data);\n  };\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\n        'https://chatwithpdf.in/rnb_callbackurl/hsos'\n      );\n      setIsLoading(false);\n      setFetchedData(response.data.data);\n      extraCalculations(response.data.data);\n    } catch (error) {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchData();\n  }, []);\n\n  // useEffect(() => {\n  //   setIsLoading(true);\n  //   const newFilteredData = fetchedData.filter(\n  //     (item: { [x: string]: { toString: () => string } }) =>\n  //       item['traineeName']\n  //         ?.toString()\n  //         .toLowerCase()\n  //         .includes(searchValue.toLowerCase())\n  //   );\n  //   setFetchedData(newFilteredData);\n  //   setPagination((prev) => ({ ...prev, pageIndex: 0 }));\n  //   setIsLoading(false);\n  // }, [searchValue]);\n\n  // const filteredData = fetchedData.filter(item =>\n  //   item.traineeName.toLowerCase().includes(searchValue.toLowerCase())\n  // );\n  // for filter data repace the fetchedData with filteredData\n  const table = useReactTable({\n    data: fetchedData,\n    columns,\n    pageCount: Math.ceil(fetchedData.length / pageSize),\n    state: { pagination: { pageIndex, pageSize } },\n    onPaginationChange: setPagination,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel()\n  });\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between\">\n        <Input\n          placeholder=\"Search by Trainee Name\"\n          value={searchValue}\n          onChange={(event) => setSearchValue(event.target.value)}\n          className=\"mb-3 w-full md:max-w-sm\"\n        />\n        <Input\n          value={fetchedData.length + ' Records'}\n          readOnly\n          className=\"pointer-events-none mb-3 w-fit md:max-w-sm\"\n        />\n      </div>\n\n      <ScrollArea className=\"h-[calc(80vh-220px)] rounded-md border\">\n        {isLoading ? (\n          <div className=\"mt-40 flex h-full items-center justify-center\">\n            <svg\n              className=\"h-8 w-8 animate-spin text-gray-600\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              ></circle>\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z\"\n              ></path>\n            </svg>\n          </div>\n        ) : (\n          <Table className=\"relative\">\n            <TableHeader>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  ))}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows.length ? (\n                table.getRowModel().rows.map((row) => (\n                  <TableRow\n                    key={row.id}\n                    data-state={row.getIsSelected() && 'selected'}\n                  >\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id}>\n                        {flexRender(\n                          cell.column.columnDef.cell,\n                          cell.getContext()\n                        )}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell\n                    colSpan={columns.length}\n                    className=\"h-24 text-center\"\n                  >\n                    No results.\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        )}\n        <ScrollBar orientation=\"horizontal\" />\n      </ScrollArea>\n\n      <div className=\"flex flex-col items-center justify-end gap-2 space-x-2 py-4 sm:flex-row\">\n        <div className=\"flex w-full items-center justify-between\">\n          <div className=\"flex-1 text-sm text-muted-foreground\">\n            {table.getFilteredSelectedRowModel().rows.length} of{' '}\n            {table.getFilteredRowModel().rows.length} row(s) selected.\n          </div>\n          <div className=\"flex flex-col items-center gap-4 sm:flex-row sm:gap-6 lg:gap-8\">\n            <div className=\"flex items-center space-x-2\">\n              <p className=\"whitespace-nowrap text-sm font-medium\">\n                Rows per page\n              </p>\n              <Select\n                value={`${pageSize}`}\n                onValueChange={(value) => table.setPageSize(Number(value))}\n              >\n                <SelectTrigger className=\"h-8 w-[70px]\">\n                  <SelectValue placeholder={pageSize} />\n                </SelectTrigger>\n                <SelectContent side=\"top\">\n                  {[10, 20, 30, 40, 50].map((size) => (\n                    <SelectItem key={size} value={`${size}`}>\n                      {size}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex w-full items-center justify-between gap-2 sm:justify-end\">\n          <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n            Page {pageIndex + 1} of {table.getPageCount()}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              aria-label=\"Go to first page\"\n              variant=\"outline\"\n              className=\"hidden h-8 w-8 p-0 lg:flex\"\n              onClick={() => table.setPageIndex(0)}\n              disabled={!table.getCanPreviousPage()}\n            >\n              <DoubleArrowLeftIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              aria-label=\"Go to previous page\"\n              variant=\"outline\"\n              className=\"h-8 w-8 p-0\"\n              onClick={() => table.previousPage()}\n              disabled={!table.getCanPreviousPage()}\n            >\n              <ChevronLeftIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              aria-label=\"Go to next page\"\n              variant=\"outline\"\n              className=\"h-8 w-8 p-0\"\n              onClick={() => table.nextPage()}\n              disabled={!table.getCanNextPage()}\n            >\n              <ChevronRightIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              aria-label=\"Go to last page\"\n              variant=\"outline\"\n              className=\"hidden h-8 w-8 p-0 lg:flex\"\n              onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n              disabled={!table.getCanNextPage()}\n            >\n              <DoubleArrowRightIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HososTable;\n","D:\\Gym-Dashboard-main\\components\\tables\\kocs-table\\cell-actions.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\tables\\kocs-table\\columns.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\tables\\kocs-table\\table.tsx",["545"],[],"'use client';\nimport React from 'react';\nimport columns from './columns';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from '@/components/ui/select';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow\n} from '@/components/ui/table';\nimport {\n  DoubleArrowLeftIcon,\n  DoubleArrowRightIcon\n} from '@radix-ui/react-icons';\nimport { ChevronLeftIcon, ChevronRightIcon } from 'lucide-react';\nimport { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';\n\nimport {\n  useReactTable,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel\n} from '@tanstack/react-table';\nimport axios from 'axios';\ninterface PaginationState {\n  pageIndex: number;\n  pageSize: number;\n}\ninterface DataRow {\n  totalMarks?: number;\n  totalAvgOfMarks?: number;\n  specificStoreAvgOfMarks?: number;\n  totalAvgOfPercents?: number;\n}\nconst KocsTable = () => {\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  const [fetchedData, setFetchedData] = React.useState<any>([]);\n  const [searchValue, setSearchValue] = React.useState<string>('');\n  const [{ pageIndex, pageSize }, setPagination] =\n    React.useState<PaginationState>({\n      pageIndex: 0,\n      pageSize: 10\n    });\n\n    const extraCalculations = (data: any) => {\n      data.forEach((d:DataRow, i: any) => {\n        let marks = 0;\n        let count = 0;\n  \n        Object.values(d).forEach((v) => {\n          if (v === 'Yes') {\n            marks++;\n            count++;\n          } else if (v === 'No') {\n            count++;\n          }\n        });\n  \n        data[i].marks = marks;\n        data[i].percent = ((marks / count) * 100).toFixed(2);\n      });\n      // const totalMarks = data.reduce((acc: any, d: DataRow) => acc + d.marks, 0);\n      // const totalMarksPercentage = data.reduce((acc: any, d: DataRow) => acc + d.percent, 0);\n      // const avgOfMarks = data.length;\n      // const avgOfPercents = data.length;\n      // data.forEach((d: Record<string, unknown>, i: any) => {\n      //   d.totalMarks = totalMarks;\n      //   d.totalAvgOfMarks = avgOfMarks;\n      //   d.specificStoreAvgOfMarks = totalMarksPercentage;\n      //   d.totalAvgOfPercents = avgOfPercents;\n      // });\n      setFetchedData(data);\n    };\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\n        'https://chatwithpdf.in/rnb_callbackurl/kocs'\n      );\n      setIsLoading(false);\n      setFetchedData(response.data.data);\n      extraCalculations(response.data.data);\n    } catch (error) {\n      setIsLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    setIsLoading(true);\n    fetchData();\n  }, []);\n\n  // const filteredData = fetchedData.filter(item =>\n  //   item.traineeName.toLowerCase().includes(searchValue.toLowerCase())\n  // );\n  // for filter data repace the fetchedData with filteredData\n  const table = useReactTable({\n    data: fetchedData,\n    columns,\n    pageCount: Math.ceil(fetchedData.length / pageSize),\n    state: { pagination: { pageIndex, pageSize } },\n    onPaginationChange: setPagination,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel()\n  });\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between\">\n        <Input\n          placeholder=\"Search...\"\n          value={searchValue}\n          onChange={(event) => setSearchValue(event.target.value)}\n          className=\"mb-3 w-full md:max-w-sm\"\n        />\n        <Input\n          value={fetchedData.length + ' Records'}\n          readOnly\n          className=\"pointer-events-none mb-3 w-fit md:max-w-sm\"\n        />\n      </div>\n\n      <ScrollArea className=\"h-[calc(80vh-220px)] rounded-md border\">\n        {isLoading ? (\n          <div className=\"mt-40 flex h-full items-center justify-center\">\n            <svg\n              className=\"h-8 w-8 animate-spin text-gray-600\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              ></circle>\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z\"\n              ></path>\n            </svg>\n          </div>\n        ) : (\n          <Table className=\"relative\">\n            <TableHeader>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  ))}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows.length ? (\n                table.getRowModel().rows.map((row) => (\n                  <TableRow\n                    key={row.id}\n                    data-state={row.getIsSelected() && 'selected'}\n                  >\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id}>\n                        {flexRender(\n                          cell.column.columnDef.cell,\n                          cell.getContext()\n                        )}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell\n                    colSpan={columns.length}\n                    className=\"h-24 text-center\"\n                  >\n                    No results.\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        )}\n        <ScrollBar orientation=\"horizontal\" />\n      </ScrollArea>\n\n      <div className=\"flex flex-col items-center justify-end gap-2 space-x-2 py-4 sm:flex-row\">\n        <div className=\"flex w-full items-center justify-between\">\n          <div className=\"flex-1 text-sm text-muted-foreground\">\n            {table.getFilteredSelectedRowModel().rows.length} of{' '}\n            {table.getFilteredRowModel().rows.length} row(s) selected.\n          </div>\n          <div className=\"flex flex-col items-center gap-4 sm:flex-row sm:gap-6 lg:gap-8\">\n            <div className=\"flex items-center space-x-2\">\n              <p className=\"whitespace-nowrap text-sm font-medium\">\n                Rows per page\n              </p>\n              <Select\n                value={`${pageSize}`}\n                onValueChange={(value) => table.setPageSize(Number(value))}\n              >\n                <SelectTrigger className=\"h-8 w-[70px]\">\n                  <SelectValue placeholder={pageSize} />\n                </SelectTrigger>\n                <SelectContent side=\"top\">\n                  {[10, 20, 30, 40, 50].map((size) => (\n                    <SelectItem key={size} value={`${size}`}>\n                      {size}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex w-full items-center justify-between gap-2 sm:justify-end\">\n          <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n            Page {pageIndex + 1} of {table.getPageCount()}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              aria-label=\"Go to first page\"\n              variant=\"outline\"\n              className=\"hidden h-8 w-8 p-0 lg:flex\"\n              onClick={() => table.setPageIndex(0)}\n              disabled={!table.getCanPreviousPage()}\n            >\n              <DoubleArrowLeftIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              aria-label=\"Go to previous page\"\n              variant=\"outline\"\n              className=\"h-8 w-8 p-0\"\n              onClick={() => table.previousPage()}\n              disabled={!table.getCanPreviousPage()}\n            >\n              <ChevronLeftIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              aria-label=\"Go to next page\"\n              variant=\"outline\"\n              className=\"h-8 w-8 p-0\"\n              onClick={() => table.nextPage()}\n              disabled={!table.getCanNextPage()}\n            >\n              <ChevronRightIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              aria-label=\"Go to last page\"\n              variant=\"outline\"\n              className=\"hidden h-8 w-8 p-0 lg:flex\"\n              onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n              disabled={!table.getCanNextPage()}\n            >\n              <DoubleArrowRightIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default KocsTable;\n","D:\\Gym-Dashboard-main\\components\\tables\\mvrs-table\\cell-action.tsx",["546","547","548","549","550","551","552","553","554","555","556"],[],"'use client';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuTrigger\n} from '@/components/ui/dropdown-menu';\nimport { Employee } from '@/constants/data';\nimport {\n  Edit,\n  MoreHorizontal,\n  Trash,\n  EyeIcon,\n  DownloadIcon\n} from 'lucide-react';\nimport { useParams, useRouter } from 'next/navigation';\nimport { useState } from 'react';\n\ninterface CellActionProps {\n  data: Employee;\n}\n\nexport const CellAction: React.FC<CellActionProps> = ({ data }: any) => {\n  const [loading, setLoading] = useState(false);\n  const [alertOpen, setAlertOpen] = useState(false);\n  const [viewMoreOpen, setViewMoreOpen] = useState(false);\n  const router = useRouter();\n\n  const onConfirm = async () => {};\n\n  return (\n    <>\n      <DropdownMenu modal={false}>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n            <span className=\"sr-only\">Open menu</span>\n            <MoreHorizontal className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n          <DropdownMenuItem\n            onClick={() => setViewMoreOpen(true)}\n            className=\"cursor-pointer\"\n          >\n            <DownloadIcon className=\"mr-2 h-4 w-4\" /> Download Excel Sheet\n          </DropdownMenuItem>\n          {/* <DropdownMenuItem\n            onClick={() => router.push(`/dashboard/user/${data.id}`)}\n          >\n            <Edit className=\"mr-2 h-4 w-4\" /> Update\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => setAlertOpen(true)}>\n            <Trash className=\"mr-2 h-4 w-4\" /> Delete\n          </DropdownMenuItem> */}\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  );\n};\n","D:\\Gym-Dashboard-main\\components\\tables\\mvrs-table\\columns.tsx",["557"],[],"'use client';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Employee } from '@/constants/data';\nimport { ColumnDef } from '@tanstack/react-table';\nimport { CellAction } from './cell-action';\n\nexport const columns: ColumnDef<Employee>[] = [\n  // {\n  //   id: 'select',\n  //   header: ({ table }) => (\n  //     <Checkbox\n  //       checked={table.getIsAllPageRowsSelected()}\n  //       onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n  //       aria-label=\"Select all\"\n  //     />\n  //   ),\n  //   cell: ({ row }) => (\n  //     <Checkbox\n  //       checked={row.getIsSelected()}\n  //       onCheckedChange={(value) => row.toggleSelected(!!value)}\n  //       aria-label=\"Select row\"\n  //     />\n  //   ),\n  //   enableSorting: false,\n  //   enableHiding: false\n  // },\n  {\n    id: 'id',\n    header: 'SHOP ID',\n    cell: ({ row }) => <>{row.index + 101}</>\n  },\n  {\n    accessorKey: 'createdAtChanged',\n    header: 'CREATED'\n  },\n  {\n    accessorKey: 'shopName',\n    header: 'SHOP NAME'\n  },\n  {\n    accessorKey: 'employeeDetailsChanged',\n    header: 'EMPLOYEE'\n  },\n  {\n    accessorKey: 'totalMarks',\n    header: 'TOTAL MARKS'\n  },\n  {\n    id: 'actions',\n    header: 'ACTIONS',\n    cell: ({ row }) => <CellAction data={row.original} />\n  }\n];\n","D:\\Gym-Dashboard-main\\components\\tables\\mvrs-table\\mvrs-table.tsx",["558"],[],"'use client';\nimport {\n  ColumnDef,\n  PaginationState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  useReactTable,\n  RowModel,\n  getPaginationRowModel\n} from '@tanstack/react-table';\nimport React from 'react';\nimport { json2csv } from 'json-2-csv';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from '@/components/ui/select';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow\n} from '@/components/ui/table';\nimport {\n  DoubleArrowLeftIcon,\n  DoubleArrowRightIcon\n} from '@radix-ui/react-icons';\nimport { ChevronLeftIcon, ChevronRightIcon, DownloadIcon } from 'lucide-react';\nimport { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[];\n  data: any;\n  searchKey: string;\n  pageNo: number;\n  totalUsers: number;\n  pageSizeOptions?: number[];\n  pageCount: number;\n}\n\nexport function MVRSTable<TData, TValue>({\n  columns,\n  data,\n  searchKey,\n  pageNo,\n  totalUsers,\n  pageCount,\n  pageSizeOptions = [10, 20, 30, 40, 50]\n}: DataTableProps<TData, TValue>) {\n  const [searchValue, setSearchValue] = React.useState('');\n  const [filteredData, setFilteredData] = React.useState(data);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const [{ pageIndex, pageSize }, setPagination] =\n    React.useState<PaginationState>({\n      pageIndex: pageNo - 1,\n      pageSize: 50\n    });\n\n  React.useEffect(() => {\n    setIsLoading(true);\n    setTimeout(() => {\n      const newFilteredData = data.filter((item: any) => {\n        const shopNameMatch = item.shopName\n          ?.toString()\n          .toLowerCase()\n          .includes(searchValue.toLowerCase());\n        const employeeDetailsMatch = item.employeeDetailsChanged\n          ?.toString()\n          .toLowerCase()\n          .includes(searchValue.toLowerCase());\n        return shopNameMatch || employeeDetailsMatch;\n      });\n      setFilteredData(newFilteredData);\n      setPagination((prev) => ({ ...prev, pageIndex: 0 }));\n      setIsLoading(false);\n    }, 500);\n  }, [searchValue, data, searchKey]);\n\n  const paginatedData = React.useMemo(() => {\n    const startIndex = pageIndex * pageSize;\n    return filteredData.slice(startIndex, startIndex + pageSize);\n  }, [filteredData, pageIndex, pageSize]);\n\n  const table = useReactTable({\n    data: paginatedData,\n    columns,\n    pageCount: Math.ceil(filteredData.length / pageSize),\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    state: {\n      pagination: { pageIndex, pageSize }\n    },\n    onPaginationChange: setPagination,\n    getPaginationRowModel: getPaginationRowModel(),\n    manualPagination: true\n  });\n\n  const downloadCSV = () => {\n    const content = json2csv(filteredData, {});\n    const blob = new Blob([content], { type: 'text/text/csv;charset=utf-8;' });\n\n    const url = URL.createObjectURL(blob);\n\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'download.csv';\n\n    document.body.appendChild(link);\n\n    link.click();\n\n    document.body.removeChild(link);\n\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <>\n      <div className=\"flex items-center justify-between\">\n        <Input\n          placeholder={`Search by Shop and Employee Name...`}\n          value={searchValue}\n          onChange={(event) => setSearchValue(event.target.value)}\n          className=\"w-full md:max-w-sm\"\n        />\n        <div className=\"mb-3 flex items-center justify-end gap-2\">\n          <Button onClick={downloadCSV}>\n            <DownloadIcon className=\"mr-2 h-4 w-4\" /> Download Excel\n          </Button>\n          <Input\n            value={filteredData.length + ' Records'}\n            readOnly\n            className=\"pointer-events-none w-28 text-blue-500\"\n          />\n        </div>\n      </div>\n      <ScrollArea className=\"h-[calc(80vh-220px)] rounded-md border\">\n        {isLoading ? (\n          <div className=\"mt-40 flex h-full items-center justify-center\">\n            <svg\n              className=\"h-8 w-8 animate-spin text-gray-600\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              ></circle>\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z\"\n              ></path>\n            </svg>\n          </div>\n        ) : (\n          <Table className=\"relative\">\n            <TableHeader>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    return (\n                      <TableHead key={header.id}>\n                        {header.isPlaceholder\n                          ? null\n                          : flexRender(\n                              header.column.columnDef.header,\n                              header.getContext()\n                            )}\n                      </TableHead>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows?.length ? (\n                table.getRowModel().rows.map((row) => (\n                  <TableRow\n                    key={row.id}\n                    data-state={row.getIsSelected() && 'selected'}\n                  >\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id}>\n                        {flexRender(\n                          cell.column.columnDef.cell,\n                          cell.getContext()\n                        )}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell\n                    colSpan={columns.length}\n                    className=\"h-24 text-center\"\n                  >\n                    No results.\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        )}\n        <ScrollBar orientation=\"horizontal\" />\n      </ScrollArea>\n\n      <div className=\"flex flex-col items-center justify-end gap-2 space-x-2 py-4 sm:flex-row\">\n        <div className=\"flex w-full items-center justify-between\">\n          <div className=\"flex-1 text-sm text-muted-foreground\">\n            {table.getFilteredSelectedRowModel().rows.length} of{' '}\n            {table.getFilteredRowModel().rows.length} row(s) selected.\n          </div>\n          <div className=\"flex flex-col items-center gap-4 sm:flex-row sm:gap-6 lg:gap-8\">\n            <div className=\"flex items-center space-x-2\">\n              <p className=\"whitespace-nowrap text-sm font-medium\">\n                Rows per page\n              </p>\n              <Select\n                value={`${table.getState().pagination.pageSize}`}\n                onValueChange={(value) => {\n                  table.setPageSize(Number(value));\n                }}\n              >\n                <SelectTrigger className=\"h-8 w-[70px]\">\n                  <SelectValue\n                    placeholder={table.getState().pagination.pageSize}\n                  />\n                </SelectTrigger>\n                <SelectContent side=\"top\">\n                  {pageSizeOptions.map((pageSize) => (\n                    <SelectItem key={pageSize} value={`${pageSize}`}>\n                      {pageSize}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex w-full items-center justify-between gap-2 sm:justify-end\">\n          <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n            Page {table.getState().pagination.pageIndex + 1} of{' '}\n            {table.getPageCount()}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              aria-label=\"Go to first page\"\n              variant=\"outline\"\n              className=\"hidden h-8 w-8 p-0 lg:flex\"\n              onClick={() => table.setPageIndex(0)}\n              disabled={!table.getCanPreviousPage()}\n            >\n              <DoubleArrowLeftIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              aria-label=\"Go to previous page\"\n              variant=\"outline\"\n              className=\"h-8 w-8 p-0\"\n              onClick={() => table.previousPage()}\n              disabled={!table.getCanPreviousPage()}\n            >\n              <ChevronLeftIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              aria-label=\"Go to next page\"\n              variant=\"outline\"\n              className=\"h-8 w-8 p-0\"\n              onClick={() => table.nextPage()}\n              disabled={!table.getCanNextPage()}\n            >\n              <ChevronRightIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              aria-label=\"Go to last page\"\n              variant=\"outline\"\n              className=\"hidden h-8 w-8 p-0 lg:flex\"\n              onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n              disabled={!table.getCanNextPage()}\n            >\n              <DoubleArrowRightIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","D:\\Gym-Dashboard-main\\components\\tables\\user-tables\\cell-action.tsx",["559","560","561","562","563","564","565"],[],"'use client';\nimport { Button } from '@/components/ui/button';\nimport { User } from '@/constants/data';\nimport { Edit, MoreHorizontal, Trash } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { useState } from 'react';\n\ninterface CellActionProps {\n  data: User;\n}\n\n","D:\\Gym-Dashboard-main\\components\\tables\\user-tables\\client.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\tables\\user-tables\\columns.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\accordion.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\alert-dialog.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\alert.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\avatar.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\badge.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\button.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\calendar.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\card.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\checkbox.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\collapsible.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\data-table.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\dialog.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\dropdown-menu.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\form.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\heading.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\input.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\label.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\modal.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\popover.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\scroll-area.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\select.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\separator.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\sheet.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\skeleton.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\slider.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\switch.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\table.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\tabs.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\textarea.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\toast.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\toaster.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\tooltip.tsx",[],[],"D:\\Gym-Dashboard-main\\components\\ui\\use-toast.ts",[],[],"D:\\Gym-Dashboard-main\\components\\ViewMeetingData.tsx",[],[],"D:\\Gym-Dashboard-main\\lib\\form-schema.ts",[],[],"D:\\Gym-Dashboard-main\\lib\\utils.ts",["566"],[],{"ruleId":"567","severity":1,"message":"568","line":74,"column":7,"nodeType":"569","messageId":"570","endLine":74,"endColumn":20},{"ruleId":"571","severity":1,"message":"572","line":8,"column":10,"nodeType":"573","messageId":"574","endLine":8,"endColumn":16},{"ruleId":"567","severity":1,"message":"568","line":44,"column":9,"nodeType":"569","messageId":"570","endLine":44,"endColumn":22},{"ruleId":"571","severity":1,"message":"575","line":169,"column":11,"nodeType":"573","messageId":"574","endLine":169,"endColumn":25},{"ruleId":"567","severity":1,"message":"568","line":53,"column":5,"nodeType":"569","messageId":"570","endLine":53,"endColumn":18},{"ruleId":"567","severity":1,"message":"568","line":12,"column":3,"nodeType":"569","messageId":"570","endLine":12,"endColumn":14},{"ruleId":"567","severity":1,"message":"568","line":15,"column":3,"nodeType":"569","messageId":"570","endLine":15,"endColumn":14},{"ruleId":"567","severity":1,"message":"568","line":28,"column":5,"nodeType":"569","messageId":"570","endLine":28,"endColumn":16},{"ruleId":"567","severity":1,"message":"568","line":39,"column":5,"nodeType":"569","messageId":"570","endLine":39,"endColumn":18},{"ruleId":"567","severity":1,"message":"568","line":56,"column":7,"nodeType":"569","messageId":"570","endLine":56,"endColumn":18},{"ruleId":"567","severity":1,"message":"568","line":12,"column":3,"nodeType":"569","messageId":"570","endLine":12,"endColumn":14},{"ruleId":"567","severity":1,"message":"568","line":15,"column":3,"nodeType":"569","messageId":"570","endLine":15,"endColumn":14},{"ruleId":"567","severity":1,"message":"568","line":28,"column":5,"nodeType":"569","messageId":"570","endLine":28,"endColumn":16},{"ruleId":"567","severity":1,"message":"568","line":48,"column":5,"nodeType":"569","messageId":"570","endLine":48,"endColumn":18},{"ruleId":"567","severity":1,"message":"568","line":65,"column":7,"nodeType":"569","messageId":"570","endLine":65,"endColumn":18},{"ruleId":"567","severity":1,"message":"568","line":20,"column":5,"nodeType":"569","messageId":"570","endLine":20,"endColumn":16},{"ruleId":"567","severity":1,"message":"568","line":36,"column":7,"nodeType":"569","messageId":"570","endLine":36,"endColumn":20},{"ruleId":"567","severity":1,"message":"568","line":48,"column":5,"nodeType":"569","messageId":"570","endLine":48,"endColumn":16},{"ruleId":"567","severity":1,"message":"568","line":62,"column":5,"nodeType":"569","messageId":"570","endLine":62,"endColumn":18},{"ruleId":"567","severity":1,"message":"568","line":12,"column":3,"nodeType":"569","messageId":"570","endLine":12,"endColumn":14},{"ruleId":"567","severity":1,"message":"568","line":15,"column":3,"nodeType":"569","messageId":"570","endLine":15,"endColumn":14},{"ruleId":"567","severity":1,"message":"568","line":66,"column":5,"nodeType":"569","messageId":"570","endLine":66,"endColumn":16},{"ruleId":"567","severity":1,"message":"568","line":79,"column":5,"nodeType":"569","messageId":"570","endLine":79,"endColumn":18},{"ruleId":"567","severity":1,"message":"568","line":96,"column":7,"nodeType":"569","messageId":"570","endLine":96,"endColumn":18},{"ruleId":"567","severity":1,"message":"568","line":12,"column":3,"nodeType":"569","messageId":"570","endLine":12,"endColumn":14},{"ruleId":"567","severity":1,"message":"568","line":15,"column":3,"nodeType":"569","messageId":"570","endLine":15,"endColumn":14},{"ruleId":"567","severity":1,"message":"568","line":28,"column":5,"nodeType":"569","messageId":"570","endLine":28,"endColumn":16},{"ruleId":"567","severity":1,"message":"568","line":39,"column":5,"nodeType":"569","messageId":"570","endLine":39,"endColumn":18},{"ruleId":"567","severity":1,"message":"568","line":56,"column":7,"nodeType":"569","messageId":"570","endLine":56,"endColumn":18},{"ruleId":"576","severity":1,"message":"577","line":10,"column":6,"nodeType":"578","endLine":10,"endColumn":8,"suggestions":"579"},{"ruleId":"571","severity":1,"message":"580","line":3,"column":8,"nodeType":"573","messageId":"574","endLine":3,"endColumn":12},{"ruleId":"567","severity":1,"message":"568","line":36,"column":3,"nodeType":"569","messageId":"570","endLine":36,"endColumn":14},{"ruleId":"571","severity":1,"message":"581","line":2,"column":10,"nodeType":"573","messageId":"574","endLine":2,"endColumn":23},{"ruleId":"571","severity":1,"message":"582","line":3,"column":10,"nodeType":"573","messageId":"574","endLine":3,"endColumn":24},{"ruleId":"571","severity":1,"message":"583","line":21,"column":11,"nodeType":"573","messageId":"574","endLine":21,"endColumn":16},{"ruleId":"571","severity":1,"message":"584","line":27,"column":9,"nodeType":"573","messageId":"574","endLine":27,"endColumn":21},{"ruleId":"571","severity":1,"message":"585","line":33,"column":3,"nodeType":"573","messageId":"574","endLine":33,"endColumn":10},{"ruleId":"571","severity":1,"message":"586","line":4,"column":10,"nodeType":"573","messageId":"574","endLine":4,"endColumn":17},{"ruleId":"587","severity":1,"message":"588","line":14,"column":15,"nodeType":"589","endLine":20,"endColumn":17},{"ruleId":"571","severity":1,"message":"590","line":7,"column":3,"nodeType":"573","messageId":"574","endLine":7,"endColumn":20},{"ruleId":"571","severity":1,"message":"591","line":5,"column":10,"nodeType":"573","messageId":"574","endLine":5,"endColumn":16},{"ruleId":"567","severity":1,"message":"568","line":38,"column":7,"nodeType":"569","messageId":"570","endLine":38,"endColumn":18},{"ruleId":"576","severity":1,"message":"592","line":46,"column":6,"nodeType":"578","endLine":46,"endColumn":8,"suggestions":"593"},{"ruleId":"571","severity":1,"message":"594","line":45,"column":25,"nodeType":"573","messageId":"574","endLine":45,"endColumn":41},{"ruleId":"576","severity":1,"message":"595","line":103,"column":6,"nodeType":"578","endLine":103,"endColumn":25,"suggestions":"596","suppressions":"597"},{"ruleId":"571","severity":1,"message":"598","line":12,"column":10,"nodeType":"573","messageId":"574","endLine":12,"endColumn":19},{"ruleId":"571","severity":1,"message":"599","line":20,"column":10,"nodeType":"573","messageId":"574","endLine":20,"endColumn":17},{"ruleId":"571","severity":1,"message":"600","line":20,"column":19,"nodeType":"573","messageId":"574","endLine":20,"endColumn":29},{"ruleId":"571","severity":1,"message":"601","line":21,"column":10,"nodeType":"573","messageId":"574","endLine":21,"endColumn":14},{"ruleId":"571","severity":1,"message":"602","line":24,"column":9,"nodeType":"573","messageId":"574","endLine":24,"endColumn":18},{"ruleId":"576","severity":1,"message":"603","line":112,"column":6,"nodeType":"578","endLine":112,"endColumn":27,"suggestions":"604","suppressions":"605"},{"ruleId":"576","severity":1,"message":"603","line":187,"column":6,"nodeType":"578","endLine":187,"endColumn":19,"suggestions":"606","suppressions":"607"},{"ruleId":"576","severity":1,"message":"608","line":100,"column":6,"nodeType":"578","endLine":100,"endColumn":8,"suggestions":"609"},{"ruleId":"576","severity":1,"message":"608","line":102,"column":6,"nodeType":"578","endLine":102,"endColumn":8,"suggestions":"610"},{"ruleId":"576","severity":1,"message":"611","line":101,"column":6,"nodeType":"578","endLine":101,"endColumn":8,"suggestions":"612"},{"ruleId":"571","severity":1,"message":"613","line":12,"column":3,"nodeType":"573","messageId":"574","endLine":12,"endColumn":7},{"ruleId":"571","severity":1,"message":"614","line":14,"column":3,"nodeType":"573","messageId":"574","endLine":14,"endColumn":8},{"ruleId":"571","severity":1,"message":"615","line":15,"column":3,"nodeType":"573","messageId":"574","endLine":15,"endColumn":10},{"ruleId":"571","severity":1,"message":"598","line":18,"column":10,"nodeType":"573","messageId":"574","endLine":18,"endColumn":19},{"ruleId":"571","severity":1,"message":"599","line":26,"column":10,"nodeType":"573","messageId":"574","endLine":26,"endColumn":17},{"ruleId":"571","severity":1,"message":"600","line":26,"column":19,"nodeType":"573","messageId":"574","endLine":26,"endColumn":29},{"ruleId":"571","severity":1,"message":"616","line":27,"column":10,"nodeType":"573","messageId":"574","endLine":27,"endColumn":19},{"ruleId":"571","severity":1,"message":"617","line":27,"column":21,"nodeType":"573","messageId":"574","endLine":27,"endColumn":33},{"ruleId":"571","severity":1,"message":"618","line":28,"column":10,"nodeType":"573","messageId":"574","endLine":28,"endColumn":22},{"ruleId":"571","severity":1,"message":"619","line":29,"column":9,"nodeType":"573","messageId":"574","endLine":29,"endColumn":15},{"ruleId":"571","severity":1,"message":"602","line":31,"column":9,"nodeType":"573","messageId":"574","endLine":31,"endColumn":18},{"ruleId":"571","severity":1,"message":"620","line":2,"column":10,"nodeType":"573","messageId":"574","endLine":2,"endColumn":18},{"ruleId":"571","severity":1,"message":"621","line":9,"column":3,"nodeType":"573","messageId":"574","endLine":9,"endColumn":11},{"ruleId":"571","severity":1,"message":"591","line":2,"column":10,"nodeType":"573","messageId":"574","endLine":2,"endColumn":16},{"ruleId":"571","severity":1,"message":"613","line":4,"column":10,"nodeType":"573","messageId":"574","endLine":4,"endColumn":14},{"ruleId":"571","severity":1,"message":"622","line":4,"column":16,"nodeType":"573","messageId":"574","endLine":4,"endColumn":30},{"ruleId":"571","severity":1,"message":"614","line":4,"column":32,"nodeType":"573","messageId":"574","endLine":4,"endColumn":37},{"ruleId":"571","severity":1,"message":"623","line":5,"column":10,"nodeType":"573","messageId":"574","endLine":5,"endColumn":19},{"ruleId":"571","severity":1,"message":"624","line":6,"column":10,"nodeType":"573","messageId":"574","endLine":6,"endColumn":18},{"ruleId":"571","severity":1,"message":"625","line":8,"column":11,"nodeType":"573","messageId":"574","endLine":8,"endColumn":26},{"ruleId":"571","severity":1,"message":"626","line":3,"column":18,"nodeType":"573","messageId":"574","endLine":3,"endColumn":25},"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/no-unused-vars","'saveAs' is defined but never used.","Identifier","unusedVar","'getStatusStyle' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.","ArrayExpression",["627"],"'Link' is defined but never used.","'OurFileRouter' is defined but never used.","'UploadDropzone' is defined but never used.","'toast' is assigned a value but never used.","'onUpdateFile' is assigned a value but never used.","'Sparkle' is defined but never used.","'UserNav' is defined but never used.","@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","'DropdownMenuGroup' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchTopAudits'. Either include it or remove the dependency array.",["628"],"'setColumnFilters' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'combiningData'. Either include it or remove the dependency array.",["629"],["630"],"'useParams' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'open' is assigned a value but never used.","'onConfirm' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'createQueryString', 'pathname', and 'router'. Either include them or remove the dependency array.",["631"],["632"],["633"],["634"],"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["635"],["636"],"React Hook React.useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["637"],"'Edit' is defined but never used.","'Trash' is defined but never used.","'EyeIcon' is defined but never used.","'alertOpen' is assigned a value but never used.","'setAlertOpen' is assigned a value but never used.","'viewMoreOpen' is assigned a value but never used.","'router' is assigned a value but never used.","'Checkbox' is defined but never used.","'RowModel' is defined but never used.","'MoreHorizontal' is defined but never used.","'useRouter' is defined but never used.","'useState' is defined but never used.","'CellActionProps' is defined but never used.","'DataRef' is defined but never used.",{"desc":"638","fix":"639"},{"desc":"640","fix":"641"},{"desc":"642","fix":"643"},{"kind":"644","justification":"645"},{"desc":"646","fix":"647"},{"kind":"644","justification":"645"},{"desc":"648","fix":"649"},{"kind":"644","justification":"645"},{"desc":"650","fix":"651"},{"desc":"650","fix":"652"},{"desc":"650","fix":"653"},"Update the dependencies array to be: [router]",{"range":"654","text":"655"},"Update the dependencies array to be: [fetchTopAudits]",{"range":"656","text":"657"},"Update the dependencies array to be: [combiningData, data, searchValue]",{"range":"658","text":"659"},"directive","","Update the dependencies array to be: [createQueryString, pageIndex, pageSize, pathname, router]",{"range":"660","text":"661"},"Update the dependencies array to be: [createQueryString, pathname, router, searchValue]",{"range":"662","text":"663"},"Update the dependencies array to be: [fetchData]",{"range":"664","text":"665"},{"range":"666","text":"665"},{"range":"667","text":"665"},[249,251],"[router]",[1428,1430],"[fetchTopAudits]",[3055,3074],"[combiningData, data, searchValue]",[2854,2875],"[createQueryString, pageIndex, pageSize, pathname, router]",[4750,4763],"[createQueryString, pathname, router, searchValue]",[2663,2665],"[fetchData]",[2666,2668],[2743,2745]]